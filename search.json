[{"path":"https://olangsrud.github.io/RegSDC/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ã˜yvind Langsrud. Author, maintainer.","code":""},{"path":"https://olangsrud.github.io/RegSDC/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Langsrud Ã˜ (2025). RegSDC: Information Preserving Regression-Based Tools Statistical Disclosure Control. R package version 1.0.0, https://olangsrud.github.io/RegSDC/, https://github.com/olangsrud/RegSDC.","code":"@Manual{,   title = {RegSDC: Information Preserving Regression-Based Tools for Statistical Disclosure Control},   author = {Ã˜yvind Langsrud},   year = {2025},   note = {R package version 1.0.0, https://olangsrud.github.io/RegSDC/},   url = {https://github.com/olangsrud/RegSDC}, }"},{"path":[]},{"path":"https://olangsrud.github.io/RegSDC/index.html","id":"information-preserving-regression-based-tools-for-statistical-disclosure-control","dir":"","previous_headings":"","what":"Information Preserving Regression-based Tools for Statistical Disclosure Control","title":"Information Preserving Regression-Based Tools for Statistical Disclosure Control","text":"Implementation methods described : Langsrud, Ã˜. (2019), Information Preserving Regression-based Tools Statistical Disclosure Control, Statistics Computing, 29, 965-976. ðŸ“Œ See list functions. paper officially available online https://dx.doi.org/10.1007/s11222-018-9848-9. free, view-version available https://rdcu./bfeWQ. package officially CRAN https://cran.r-project.org/package=RegSDC","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/CalculateC.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of C by solving equation 10 in the paper â€” CalculateCdirect","title":"Calculation of C by solving equation 10 in the paper â€” CalculateCdirect","text":"limit calculated FindAlpha used alpha =1 chosen (warning produced). output, alpha attribute.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/CalculateC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of C by solving equation 10 in the paper â€” CalculateCdirect","text":"","code":"CalculateCdirect(a, b, epsAlpha = 1e-07, AlphaHandler = warning, alpha = NULL)  CalculateC(a, b, ..., viaQR = NULL, returnAlpha = FALSE)"},{"path":"https://olangsrud.github.io/RegSDC/reference/CalculateC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of C by solving equation 10 in the paper â€” CalculateCdirect","text":"matrix E paper b matrix Eg paper epsAlpha Precision constant alpha calculation AlphaHandler Function (warning stop) used alpha<1 alpha Possible alpha input instead computing ... Arguments CalculateCdirect viaQR TRUE QR involved. may needed handle colinear data. NULL viaQR set TRUE ordinary computations fail. returnAlpha TRUE alpha (1 value 1) returned instead C. Attribute viaQR included.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/CalculateC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of C by solving equation 10 in the paper â€” CalculateCdirect","text":"Calculated C attributes alpha viaQR (CalculateC)","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/CalculateC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculation of C by solving equation 10 in the paper â€” CalculateCdirect","text":"epsAlpha=NULL calculations performed directly (alpha=1) alpha attribute.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/CalculateC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculation of C by solving equation 10 in the paper â€” CalculateCdirect","text":"Ã˜yvind Langsrud","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/CalculateC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation of C by solving equation 10 in the paper â€” CalculateCdirect","text":"","code":"x <- 1:10 y <- matrix(rnorm(30) + 1:30, 10, 3) a <- residuals(lm(y ~ x)) b <- residuals(lm(2 * y + matrix(rnorm(30), 10, 3) ~ x))  a1 <- a b1 <- b a1[, 3] <- a[, 1] + a[, 2] b1[, 3] <- b[, 1] + b[, 2]  alpha <- FindAlpha(a, b) FindAlphaSimple(a, b)  # Same result as above #> [1] 0.3470664 CalculateC(a, b) #> Warning: alpha =  0.347066398752635 #>          [,1]      [,2]         [,3] #> [1,] 1.840137 -1.407390  0.897151875 #> [2,] 0.000000  2.082907 -0.380262716 #> [3,] 0.000000  0.000000  0.000955271 #> attr(,\"alpha\") #> [1] 0.3470664 #> attr(,\"viaQR\") #> [1] FALSE CalculateCdirect(a, b)  # Same result as above without viaQR attribute  #> Warning: alpha =  0.347066398752635 #>          [,1]      [,2]         [,3] #> [1,] 1.840137 -1.407390  0.897151875 #> [2,] 0.000000  2.082907 -0.380262716 #> [3,] 0.000000  0.000000  0.000955271 #> attr(,\"alpha\") #> [1] 0.3470664 CalculateCdirect(a, b, alpha = alpha/(1 + 1e-07))  # Same result as above since epsAlpha = 1e-07 #>          [,1]      [,2]         [,3] #> [1,] 1.840137 -1.407390  0.897151875 #> [2,] 0.000000  2.082907 -0.380262716 #> [3,] 0.000000  0.000000  0.000955271 #> attr(,\"alpha\") #> [1] 0.3470664 CalculateCdirect(a, b, alpha = alpha/2)  # OK #>          [,1]      [,2]       [,3] #> [1,] 2.986353 -1.496060 1.76726650 #> [2,] 0.000000  2.874595 0.04488436 #> [3,] 0.000000  0.000000 1.70010235 #> attr(,\"alpha\") #> [1] 0.1735332 # CalculateCdirect(a,b, alpha = 2*alpha) # Not OK  FindAlpha(a, b1) #> [1] 0.2683611 # FindAlphaSimple(a,b1) # Not working since b1 is collinear CalculateC(a, b1, returnAlpha = TRUE)  # Almost same alpha as above (epsAlpha cause difference) #> Warning: alpha =  0.26836103483308 #> [1] 0.268361 #> attr(,\"viaQR\") #> [1] FALSE  FindAlpha(b, a) #> [1] 1.913342 CalculateC(b, a, returnAlpha = TRUE)  # 1 returned (not same as above) #> [1] 1 #> attr(,\"viaQR\") #> [1] FALSE CalculateC(b, a) #>          [,1]      [,2]     [,3] #> [1,] 7.104527 -2.208985 4.737671 #> [2,] 0.000000  5.433107 1.479732 #> [3,] 0.000000  0.000000 4.872169 #> attr(,\"alpha\") #> [1] 1 #> attr(,\"viaQR\") #> [1] FALSE  FindAlpha(b1, a)   # alpha smaller than epsAlpha is set to 0 in CalculateC #> [1] 0 CalculateC(b1, a)  # When alpha = 0 C is calculated by GenQR insetad of chol #> Warning: alpha =  0 #>          [,1]      [,2]     [,3] #> [1,] 7.825387 -2.656425 5.168962 #> [2,] 0.000000  6.263964 6.263964 #> attr(,\"alpha\") #> [1] 0 #> attr(,\"viaQR\") #> [1] FALSE"},{"path":"https://olangsrud.github.io/RegSDC/reference/Cdiff.html","id":null,"dir":"Reference","previous_headings":"","what":"Matrix difference (a-b) including checking for equal columns â€” Cdiff","title":"Matrix difference (a-b) including checking for equal columns â€” Cdiff","text":"column checked .equal","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/Cdiff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matrix difference (a-b) including checking for equal columns â€” Cdiff","text":"","code":"Cdiff(a, b, tolerance = sqrt(.Machine$double.eps))"},{"path":"https://olangsrud.github.io/RegSDC/reference/Cdiff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matrix difference (a-b) including checking for equal columns â€” Cdiff","text":"numerical matrix b numerical matrix tolerance parameter .equal","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/Cdiff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matrix difference (a-b) including checking for equal columns â€” Cdiff","text":"(-b) equal columns set zero","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/Cdiff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matrix difference (a-b) including checking for equal columns â€” Cdiff","text":"","code":"a <- matrix(rnorm(6), 3, 2) b <- matrix(rnorm(6), 3, 2) a - b #>              [,1]      [,2] #> [1,]  0.009288562  1.453554 #> [2,] -0.796758883  0.293173 #> [3,]  0.625323610 -1.260001 Cdiff(a, b) #>              [,1]      [,2] #> [1,]  0.009288562  1.453554 #> [2,] -0.796758883  0.293173 #> [3,]  0.625323610 -1.260001 b[, 1] <- a[, 1] + (.Machine$double.eps)^(2/3) * b[, 1] a - b #>               [,1]      [,2] #> [1,] -3.905409e-11  1.453554 #> [2,] -4.828138e-12  0.293173 #> [3,] -1.791722e-11 -1.260001 Cdiff(a, b) #>      [,1]      [,2] #> [1,]    0  1.453554 #> [2,]    0  0.293173 #> [3,]    0 -1.260001 a[, 2] <- b[, 2] a - b #>               [,1] [,2] #> [1,] -3.905409e-11    0 #> [2,] -4.828138e-12    0 #> [3,] -1.791722e-11    0 Cdiff(a, b) #>      [,1] [,2] #> [1,]    0    0 #> [2,]    0    0 #> [3,]    0    0"},{"path":"https://olangsrud.github.io/RegSDC/reference/EnsureIntercept.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure constant term in matrix â€” EnsureIntercept","title":"Ensure constant term in matrix â€” EnsureIntercept","text":"column ones may added","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/EnsureIntercept.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure constant term in matrix â€” EnsureIntercept","text":"","code":"EnsureIntercept(x)"},{"path":"https://olangsrud.github.io/RegSDC/reference/EnsureIntercept.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure constant term in matrix â€” EnsureIntercept","text":"x Input matrix","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/EnsureIntercept.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure constant term in matrix â€” EnsureIntercept","text":"input matrix possibly column ones added","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/EnsureIntercept.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ensure constant term in matrix â€” EnsureIntercept","text":"Ã˜yvind Langsrud","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/EnsureIntercept.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure constant term in matrix â€” EnsureIntercept","text":"","code":"x <- matrix(c(5, 8, 4, 2, 7, 6), 3, 2) EnsureIntercept(x) #>      [,1] [,2] [,3] #> [1,]    1    5    2 #> [2,]    1    8    7 #> [3,]    1    4    6 EnsureIntercept(cbind(x, 2)) #>      [,1] [,2] [,3] #> [1,]    5    2    2 #> [2,]    8    7    2 #> [3,]    4    6    2 EnsureIntercept(cbind(x, 0)) #>      [,1] [,2] [,3] [,4] #> [1,]    1    5    2    0 #> [2,]    1    8    7    0 #> [3,]    1    4    6    0 EnsureIntercept(matrix(0, 4, 0)) #>      [,1] #> [1,]    1 #> [2,]    1 #> [3,]    1 #> [4,]    1"},{"path":"https://olangsrud.github.io/RegSDC/reference/EnsureMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure that input is matrix (by as.matrix) and check number of rows (and columns) â€” EnsureMatrix","title":"Ensure that input is matrix (by as.matrix) and check number of rows (and columns) â€” EnsureMatrix","text":"Ensure input matrix (.matrix) check number rows (columns)","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/EnsureMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure that input is matrix (by as.matrix) and check number of rows (and columns) â€” EnsureMatrix","text":"","code":"EnsureMatrix(x, nRow = NULL, nCol = NULL)"},{"path":"https://olangsrud.github.io/RegSDC/reference/EnsureMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure that input is matrix (by as.matrix) and check number of rows (and columns) â€” EnsureMatrix","text":"x NULL input .matrix nRow Expected number rows nCol Expected number columns","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/EnsureMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure that input is matrix (by as.matrix) and check number of rows (and columns) â€” EnsureMatrix","text":"Input matrix","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/EnsureMatrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ensure that input is matrix (by as.matrix) and check number of rows (and columns) â€” EnsureMatrix","text":"Ã˜yvind Langsrud","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/EnsureMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure that input is matrix (by as.matrix) and check number of rows (and columns) â€” EnsureMatrix","text":"","code":"x <- matrix(c(5, 8, 4, 2, 7, 6), 3, 2) EnsureMatrix(x) #>      [,1] [,2] #> [1,]    5    2 #> [2,]    8    7 #> [3,]    4    6 EnsureMatrix(x, 3) #>      [,1] [,2] #> [1,]    5    2 #> [2,]    8    7 #> [3,]    4    6 EnsureMatrix(1:4) #>      [,1] #> [1,]    1 #> [2,]    2 #> [3,]    3 #> [4,]    4 EnsureMatrix(1:4, 4) #>      [,1] #> [1,]    1 #> [2,]    2 #> [3,]    3 #> [4,]    4 EnsureMatrix(NULL, 4) #>      #> [1,] #> [2,] #> [3,] #> [4,] try(EnsureMatrix(x, 4)) #> Error in EnsureMatrix(x, 4) : nrow is 3 when 4 expected try(EnsureMatrix(1:3, 4)) #> Error in EnsureMatrix(1:3, 4) : nrow is 3 when 4 expected EnsureMatrix(x, 3, 2) #>      [,1] [,2] #> [1,]    5    2 #> [2,]    8    7 #> [3,]    4    6 try(EnsureMatrix(x, 3, 3)) #> Error in EnsureMatrix(x, 3, 3) : ncol is 2 when 3 expected try(EnsureMatrix(NULL, 3, 3)) #> Error in EnsureMatrix(NULL, 3, 3) : nCol not allowed when x is NULL"},{"path":"https://olangsrud.github.io/RegSDC/reference/FindAlpha.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of alpha â€” FindAlpha","title":"Calculation of alpha â€” FindAlpha","text":"Function find largest alpha makes equation 10 paper solvable.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/FindAlpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of alpha â€” FindAlpha","text":"","code":"FindAlpha(a, b, tryViaQR = TRUE)  FindAlphaSimple(a, b)"},{"path":"https://olangsrud.github.io/RegSDC/reference/FindAlpha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of alpha â€” FindAlpha","text":"matrix E paper b matrix Eg paper tryViaQR TRUE QR transformation used (handle collinearity) ordinary calculations fail.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/FindAlpha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of alpha â€” FindAlpha","text":"alpha","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/FindAlpha.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculation of alpha â€” FindAlpha","text":"FindAlphaSimple performs calculations simple/direct method. FindAlpha made handle problematic special cases.","code":""},{"path":[]},{"path":"https://olangsrud.github.io/RegSDC/reference/FindAlpha.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculation of alpha â€” FindAlpha","text":"Ã˜yvind Langsrud","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/GenQR.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized QR decomposition â€” GenQR","title":"Generalized QR decomposition â€” GenQR","text":"Matrix X decomposed Q R (X=QR) columns Q orthonormal. Ordinary QR SVD may used.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/GenQR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized QR decomposition â€” GenQR","text":"","code":"GenQR(x, doSVD = FALSE, findR = TRUE, makeunique = findR, tol = 1e-07)"},{"path":"https://olangsrud.github.io/RegSDC/reference/GenQR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized QR decomposition â€” GenQR","text":"x Matrix decomposed doSVD TRUE SVD instead QR findR FALSE Q returned makeunique TRUE force uniqueness positive diagonal elements (QR) column sums (SVD) tol input qr , case svd(), similar input MASS::ginv().","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/GenQR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized QR decomposition â€” GenQR","text":"List Q R just Q","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/GenQR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalized QR decomposition â€” GenQR","text":"handle dependency usual decomposition X PX=QR P permutation matrix. function returns RP^T R. SVD, Q=U R=SV^T.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/GenQR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized QR decomposition â€” GenQR","text":"Ã˜yvind Langsrud","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/GenQR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized QR decomposition â€” GenQR","text":"","code":"GenQR(matrix(rnorm(15),5,3)) #> $Q #>           [,1]        [,2]       [,3] #> [1,] 0.6506141 -0.27552349  0.2724166 #> [2,] 0.1151541  0.03820916  0.2026521 #> [3,] 0.6413574 -0.26341410 -0.1602308 #> [4,] 0.2548852  0.78496298  0.5114434 #> [5,] 0.2951864  0.48690143 -0.7729638 #>  #> $R #>          [,1]      [,2]       [,3] #> [1,] 2.055474 0.7641241 -0.2884700 #> [2,] 0.000000 2.2033898 -0.4408586 #> [3,] 0.000000 0.0000000  2.9917666 #>     GenQR(matrix(rnorm(15),5,3)[,c(1,2,1,3)]) #> $Q #>            [,1]        [,2]       [,3] #> [1,] -0.1205333  0.50656586  0.4395228 #> [2,]  0.3359040 -0.01435155  0.7907968 #> [3,] -0.2956947  0.23189514 -0.2468838 #> [4,]  0.3283929  0.81442851 -0.2390882 #> [5,]  0.8230206 -0.16160416 -0.2516851 #>  #> $R #>          [,1]        [,2]         [,3]       [,4] #> [1,] 1.291708 -0.02523919 1.291708e+00 -0.3576097 #> [2,] 0.000000  2.06423395 4.799873e-17  0.2032711 #> [3,] 0.000000  0.00000000 1.402158e-17  1.8207790 #>     GenQR(matrix(rnorm(15),5,3)[,c(1,2,1,3)],TRUE) #> $Q #>            [,1]        [,2]       [,3] #> [1,] -0.4011668  0.03384302 -0.4412441 #> [2,] -0.2297930 -0.38528771 -0.2724030 #> [3,] -0.6943454 -0.49688334  0.2035029 #> [4,] -0.4966086  0.61889271  0.5132699 #> [5,] -0.2398433  0.46956022 -0.6528712 #>  #> $R #>           [,1]        [,2]      [,3]       [,4] #> [1,] 2.3030889 -0.07691417 2.3030889 -1.5551106 #> [2,] 0.4537752 -1.37823298 0.4537752  1.4122306 #> [3,] 0.3358033  1.18046938 0.3358033  0.9362517 #>"},{"path":"https://olangsrud.github.io/RegSDC/reference/IpsoExtra.html","id":null,"dir":"Reference","previous_headings":"","what":"Extended variant of RegSDCipso â€” IpsoExtra","title":"Extended variant of RegSDCipso â€” IpsoExtra","text":"Possible generate several y's re-scale residuals. Regression fitting sparse matrix algorithm also possible (see reference).","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/IpsoExtra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extended variant of RegSDCipso â€” IpsoExtra","text":"","code":"IpsoExtra(   y,   x = NULL,   ensureIntercept = TRUE,   returnParts = FALSE,   nRep = 1,   resScale = NULL,   digits = 9,   rmse = NULL,   sparseLimit = 500,   printInc = TRUE )"},{"path":"https://olangsrud.github.io/RegSDC/reference/IpsoExtra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extended variant of RegSDCipso â€” IpsoExtra","text":"y Matrix confidential variables x Matrix non-confidential variables ensureIntercept Whether ensure/include constant term. Non-NULL x subjected EnsureIntercept returnParts Alternative output two matrices: yHat (fitted) yRes (generated residuals). nRep Integer, >1, several y's generated. Extra columns output. resScale Residuals scaled resScale digits Digits used detect perfect fit (caused fitted values input). checking done rmse input. perfect fit, rmse used instead resScale. rmse Desired root mean square error (residual standard error). used resScale NULL used (see parameter digits). parameter forces rmse value one y variable (first). sparseLimit Limit number rows reduced x-matrix within algorithm. exceeded, sparse algorithm used (see reference).","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/IpsoExtra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extended variant of RegSDCipso â€” IpsoExtra","text":"Generated version y","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/IpsoExtra.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extended variant of RegSDCipso â€” IpsoExtra","text":"Douglas Bates R Development Core Team (2022), Comparing Least Squares Calculations, R Vignette, vignette(\"Comparisons\", package=\"Matrix\").","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/IpsoExtra.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extended variant of RegSDCipso â€” IpsoExtra","text":"Ã˜yvind Langsrud","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/IpsoExtra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extended variant of RegSDCipso â€” IpsoExtra","text":"","code":"x <- matrix(1:5, 5, 1) y <- matrix(10 * (sample(7:39, 15) + 4 * (1:15)), 5, 3) colnames(y) <- paste(\"y\", 1:3, sep = \"\") y1 <- y[, 1, drop = FALSE]  IpsoExtra(y, x)  # Same as RegSDCipso(y, x) #>            y1       y2       y3 #> [1,] 170.6112 536.1386 601.1863 #> [2,] 289.6568 475.8284 799.4067 #> [3,] 458.1592 499.4642 920.2322 #> [4,] 342.2664 399.0320 696.5705 #> [5,] 479.3064 699.5368 862.6043  IpsoExtra(y, x, resScale = 0)  # Fitted values (whole numbers in this case) #>       y1  y2  y3 #> [1,] 214 472 692 #> [2,] 281 497 734 #> [3,] 348 522 776 #> [4,] 415 547 818 #> [5,] 482 572 860 IpsoExtra(y, x, nRep = 2, resScale = 1e-05)  # Downscaled residuals  #>            y1       y2       y3       y1       y2       y3 #> [1,] 213.9996 472.0002 691.9991 213.9997 472.0004 691.9999 #> [2,] 281.0010 497.0005 734.0018 280.9998 496.9987 733.9993 #> [3,] 347.9995 521.9983 775.9995 348.0005 522.0015 776.0005 #> [4,] 414.9994 547.0011 817.9993 415.0009 546.9995 818.0016 #> [5,] 482.0004 571.9999 860.0003 481.9991 572.0000 859.9987  ySynth <- IpsoExtra(y1, x, nRep = 2, rmse = 0.25)  # Downscaled residuals  summary(lm(ySynth ~ x))  # Identical regression results with Residual standard error: 0.25 #> Response y1 : #>  #> Call: #> lm(formula = y1 ~ x) #>  #> Residuals: #>        1        2        3        4        5  #> -0.24471  0.34076 -0.03998  0.03651 -0.09258  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) 147.00000    0.26220   560.6 1.25e-08 *** #> x            67.00000    0.07906   847.5 3.62e-09 *** #> --- #> Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1 #>  #> Residual standard error: 0.25 on 3 degrees of freedom #> Multiple R-squared:      1,\tAdjusted R-squared:      1  #> F-statistic: 7.182e+05 on 1 and 3 DF,  p-value: 3.623e-09 #>  #>  #> Response y1 : #>  #> Call: #> lm(formula = y1 ~ x) #>  #> Residuals: #>        1        2        3        4        5  #>  0.09374 -0.30613  0.18605  0.17133 -0.14499  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) 147.00000    0.26220   560.6 1.25e-08 *** #> x            67.00000    0.07906   847.5 3.62e-09 *** #> --- #> Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1 #>  #> Residual standard error: 0.25 on 3 degrees of freedom #> Multiple R-squared:      1,\tAdjusted R-squared:      1  #> F-statistic: 7.182e+05 on 1 and 3 DF,  p-value: 3.623e-09 #>  #>   IpsoExtra(fitted(lm(y1 ~ x)), x, nRep = 2, resScale = 0.1)  # resScale no effect since perfect fit #>   [,1] [,2] #> 1  214  214 #> 2  281  281 #> 3  348  348 #> 4  415  415 #> 5  482  482 IpsoExtra(fitted(lm(y1 ~ x)), x, nRep = 2, resScale = 0.1, rmse = 2)  # with warning #> Warning: rmse used instead of resScal since perfect fit. #>       [,1]     [,2] #> 1 215.2762 212.9805 #> 2 280.2639 281.6310 #> 3 347.7186 347.8100 #> 4 412.6665 417.5651 #> 5 484.0749 480.0134  # Using data in the paper IpsoExtra(RegSDCdata(\"sec7y\"), RegSDCdata(\"sec7x\"))  # Similar to Y* #>                freq #> row1_col1 -1.097376 #> row2_col1 10.752402 #> row3_col1 12.000000 #> row4_col1 12.344973 #> row1_col2 15.097376 #> row2_col2  4.902624 #> row3_col2 22.000000 #> row4_col2 19.000000 #> row1_col3 32.000000 #> row2_col3  7.344973 #> row3_col3  7.655027 #> row4_col3 16.000000 #> row1_col4 30.000000 #> row2_col4  8.000000 #> row3_col4 -3.655027 #> row4_col4  8.655027 IpsoExtra(RegSDCdata(\"sec7y\"), RegSDCdata(\"sec7x\"), rmse = 1) #>                freq #> row1_col1  4.423115 #> row2_col1  3.772169 #> row3_col1 12.000000 #> row4_col1 13.804716 #> row1_col2  9.576885 #> row2_col2 10.423115 #> row3_col2 22.000000 #> row4_col2 19.000000 #> row1_col3 32.000000 #> row2_col3  8.804716 #> row3_col3  6.195284 #> row4_col3 16.000000 #> row1_col4 30.000000 #> row2_col4  8.000000 #> row3_col4 -2.195284 #> row4_col4  7.195284"},{"path":"https://olangsrud.github.io/RegSDC/reference/ReduceX.html","id":null,"dir":"Reference","previous_headings":"","what":"Suppressed tabular data: Reduce dummy matrix, X (and estimate Y) â€” ReduceX","title":"Suppressed tabular data: Reduce dummy matrix, X (and estimate Y) â€” ReduceX","text":"section 7 paper  Z = t(X) %*% Y X dummy matrix. elements Y can found directly elements Z. Corresponding rows X removed. removing rows, columns zeros also removed.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/ReduceX.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suppressed tabular data: Reduce dummy matrix, X (and estimate Y) â€” ReduceX","text":"","code":"ReduceX(x, z = NULL, y = NULL, digits = 9)"},{"path":"https://olangsrud.github.io/RegSDC/reference/ReduceX.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suppressed tabular data: Reduce dummy matrix, X (and estimate Y) â€” ReduceX","text":"x X matrix z Z matrix y Y matrix digits non-NULL NULL y input, output y estimates close whole numbers rounded using digits input RoundWhole.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/ReduceX.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suppressed tabular data: Reduce dummy matrix, X (and estimate Y) â€” ReduceX","text":"list four elements: x Reduced x z Corresponding reduced z NULL z input yKnown Logical vector specifying elements y can found directly elements z y y input (reduced) estimated y NULL y input","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/ReduceX.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Suppressed tabular data: Reduce dummy matrix, X (and estimate Y) â€” ReduceX","text":"estimate Y, function finds values directly Z values running Z2Yhat reduced versions X Z.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/ReduceX.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Suppressed tabular data: Reduce dummy matrix, X (and estimate Y) â€” ReduceX","text":"Ã˜yvind Langsrud","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/ReduceX.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Suppressed tabular data: Reduce dummy matrix, X (and estimate Y) â€” ReduceX","text":"","code":"# Same data as in the paper z <- RegSDCdata(\"sec7z\") x <- RegSDCdata(\"sec7x\") y <- RegSDCdata(\"sec7y\")  # Now z is t(x) %*% y   a <- ReduceX(x, z, y) b <- ReduceX(x, z) d <- ReduceX(x, z = NULL, y)  # No z in output  # Identical output for x and z identical(a$x, b$x) #> [1] TRUE identical(a$x, d$x) #> [1] TRUE identical(a$z, b$z) #> [1] TRUE  # Same y in output as input identical(a$y, y) #> [1] TRUE identical(d$y, y) #> [1] TRUE  # Estimate of y (yHat) when NULL y input b$y #>                freq #> row1_col1  4.173913 #> row2_col1  4.521739 #> row3_col1 12.000000 #> row4_col1 13.304348 #> row1_col2  9.826087 #> row2_col2 10.173913 #> row3_col2 22.000000 #> row4_col2 19.000000 #> row1_col3 32.000000 #> row2_col3  8.304348 #> row3_col3  6.695652 #> row4_col3 16.000000 #> row1_col4 30.000000 #> row2_col4  8.000000 #> row3_col4 -2.695652 #> row4_col4  7.695652  # These elements of y can be found directly in in z y[a$yKnown, , drop = FALSE] #>           freq #> row3_col1   12 #> row3_col2   22 #> row4_col2   19 #> row1_col3   32 #> row4_col3   16 #> row1_col4   30 #> row2_col4    8 # They can be found by searching for unit colSums colSums(x)[colSums(x) == 1] #> row1:col3 row1:col4 row2:col4 row3:col1 row3:col2 row4:col2 row4:col3  #>         1         1         1         1         1         1         1   # These trivial data rows can be omitted when processing data x[!a$yKnown, ] #>           Total:Total Total:col1 Total:col2 Total:col3 Total:col4 row1:Total #> row1_col1           1          1          0          0          0          1 #> row2_col1           1          1          0          0          0          0 #> row4_col1           1          1          0          0          0          0 #> row1_col2           1          0          1          0          0          1 #> row2_col2           1          0          1          0          0          0 #> row2_col3           1          0          0          1          0          0 #> row3_col3           1          0          0          1          0          0 #> row3_col4           1          0          0          0          1          0 #> row4_col4           1          0          0          0          1          0 #>           row1:col3 row1:col4 row2:Total row2:col4 row3:Total row3:col1 #> row1_col1         0         0          0         0          0         0 #> row2_col1         0         0          1         0          0         0 #> row4_col1         0         0          0         0          0         0 #> row1_col2         0         0          0         0          0         0 #> row2_col2         0         0          1         0          0         0 #> row2_col3         0         0          1         0          0         0 #> row3_col3         0         0          0         0          1         0 #> row3_col4         0         0          0         0          1         0 #> row4_col4         0         0          0         0          0         0 #>           row3:col2 row4:Total row4:col2 row4:col3 #> row1_col1         0          0         0         0 #> row2_col1         0          0         0         0 #> row4_col1         0          1         0         0 #> row1_col2         0          0         0         0 #> row2_col2         0          0         0         0 #> row2_col3         0          0         0         0 #> row3_col3         0          0         0         0 #> row3_col4         0          0         0         0 #> row4_col4         0          1         0         0 # Now several columns can be omitted since zero colSums colSums0 <- colSums(x[!a$yKnown, ]) == 0 # The resulting matrix is output from the function identical(x[!a$yKnown, !colSums0], a$x) #> [1] TRUE  # Output z can be computed from this output x identical(t(a$x) %*% y[!a$yKnown, , drop = FALSE], a$z) #> [1] TRUE"},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCadd.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression-based SDC Tools - Synthetic addition with residual correlation control â€” RegSDCadd","title":"Regression-based SDC Tools - Synthetic addition with residual correlation control â€” RegSDCadd","text":"Implementation equation 6 (arbitrary residual data) equation 7 (residual correlations) paper. alpha limit calculated (equation 9). limit used alpha =1 chosen (warning produced). output, alpha attribute.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCadd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression-based SDC Tools - Synthetic addition with residual correlation control â€” RegSDCadd","text":"","code":"RegSDCadd(y, resCorr = NULL, x = NULL, yStart = NULL, ensureIntercept = TRUE)"},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCadd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression-based SDC Tools - Synthetic addition with residual correlation control â€” RegSDCadd","text":"y Matrix confidential variables resCorr Required residual correlations (possibly recycled) x Matrix non-confidential variables yStart Arbitrary data whose residuals used. calculated resCorr NULL. ensureIntercept Whether ensure/include constant term. Non-NULL x subjected EnsureIntercept","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCadd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regression-based SDC Tools - Synthetic addition with residual correlation control â€” RegSDCadd","text":"Generated version y alpha attribute","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCadd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regression-based SDC Tools - Synthetic addition with residual correlation control â€” RegSDCadd","text":"Use epsAlpha=NULL avoid calculation alpha. Use alpha (<1) produce warning. Input matrices subjected EnsureMatrix.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCadd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Regression-based SDC Tools - Synthetic addition with residual correlation control â€” RegSDCadd","text":"Ã˜yvind Langsrud","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCadd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regression-based SDC Tools - Synthetic addition with residual correlation control â€” RegSDCadd","text":"","code":"x <- matrix(1:10, 10, 1) y <- matrix(rnorm(30) + 1:30, 10, 3) yOut <- RegSDCadd(y, c(0.1, 0.2, 0.3), x)  # Correlations between residuals as required diag(cor(residuals(lm(y ~ x)), residuals(lm(yOut ~ x)))) #> [1] 0.1 0.2 0.3  # Identical covariance matrices cov(y) - cov(yOut) #>              [,1]         [,2]         [,3] #> [1,] 1.776357e-15 7.105427e-15 5.329071e-15 #> [2,] 7.105427e-15 1.421085e-14 1.243450e-14 #> [3,] 5.329071e-15 1.243450e-14 7.105427e-15 cov(residuals(lm(y ~ x))) - cov(residuals(lm(yOut ~ x))) #>               [,1]          [,2]          [,3] #> [1,] -6.661338e-16 -1.110223e-15  9.992007e-16 #> [2,] -1.110223e-15  0.000000e+00 -1.471046e-15 #> [3,]  9.992007e-16 -1.471046e-15  1.110223e-15  # Identical regression results summary(lm(y[, 1] ~ x)) #>  #> Call: #> lm(formula = y[, 1] ~ x) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -1.6541 -0.8349 -0.3027  0.8195  2.3333  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   0.3089     0.8918   0.346 0.737999     #> x             0.9642     0.1437   6.709 0.000151 *** #> --- #> Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1 #>  #> Residual standard error: 1.306 on 8 degrees of freedom #> Multiple R-squared:  0.8491,\tAdjusted R-squared:  0.8302  #> F-statistic: 45.01 on 1 and 8 DF,  p-value: 0.0001514 #>  summary(lm(yOut[, 1] ~ x)) #>  #> Call: #> lm(formula = yOut[, 1] ~ x) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.94212 -0.86987 -0.01549  0.30785  2.05468  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   0.3089     0.8918   0.346 0.737999     #> x             0.9642     0.1437   6.709 0.000151 *** #> --- #> Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1 #>  #> Residual standard error: 1.306 on 8 degrees of freedom #> Multiple R-squared:  0.8491,\tAdjusted R-squared:  0.8302  #> F-statistic: 45.01 on 1 and 8 DF,  p-value: 0.0001514 #>   # alpha as attribute attr(yOut, \"alpha\") #> [1] 1  # With yStart as input and alpha limit in use (warning produced) yOut <- RegSDCadd(y, NULL, x, 2 * y + matrix(rnorm(30), 10, 3)) #> Warning: alpha =  0.359609563673981 attr(yOut, \"alpha\") #> [1] 0.3596096  # Same correlation for all variables RegSDCadd(y, 0.2, x) #>            [,1]     [,2]     [,3] #>  [1,] 0.1494604 10.52564 20.53769 #>  [2,] 1.5386025 11.05852 21.64399 #>  [3,] 3.6344120 11.44332 24.19438 #>  [4,] 5.8993091 13.54563 24.33327 #>  [5,] 6.1946294 14.88324 27.17731 #>  [6,] 5.6022459 15.83345 24.14188 #>  [7,] 5.4877111 18.83235 27.40053 #>  [8,] 9.9434197 16.74912 26.96492 #>  [9,] 8.7776129 17.83100 29.35738 #> [10,] 8.8948941 20.20814 31.12093 #> attr(,\"alpha\") #> [1] 1 # But in this case RegSDCcomp is equivalent and faster RegSDCcomp(y, 0.2, x) #>            [,1]     [,2]     [,3] #>  [1,]  2.353808 10.18794 22.51758 #>  [2,]  1.740246 11.78502 20.46485 #>  [3,]  3.035642 11.37871 22.73457 #>  [4,]  3.612985 12.99010 24.39668 #>  [5,]  5.849152 14.20320 24.54176 #>  [6,]  5.826319 16.41682 28.20489 #>  [7,]  7.287550 18.21807 26.55755 #>  [8,]  6.627010 17.79353 26.99387 #>  [9,]  7.299075 19.66443 30.20654 #> [10,] 12.490511 18.27258 30.25402   # Make nearly collinear data y[, 3] <- y[, 1] + y[, 2] + 0.001 * y[, 3] # Not possible to achieve correlations. Small alpha with warning. RegSDCadd(y, c(0.1, 0.2, 0.3), x) #> Warning: alpha =  0.00540603699649462 #>            [,1]      [,2]     [,3] #>  [1,]  1.085687  9.701785 10.80909 #>  [2,]  4.048861 11.359769 15.43114 #>  [3,]  4.122992 11.887615 16.03209 #>  [4,]  2.903179 13.800613 16.72684 #>  [5,]  4.633005 15.090374 19.75092 #>  [6,]  5.144869 15.641939 20.81319 #>  [7,]  5.088251 18.428749 23.54311 #>  [8,]  7.872356 17.877153 25.77843 #>  [9,]  9.804360 16.880807 26.71378 #> [10,] 11.418736 20.241600 31.69099 #> attr(,\"alpha\") #> [1] 0.005406037 # Exact collinear data y[, 3] <- y[, 1] + y[, 2] # Zero alpha with warning RegSDCadd(y, c(0.1, 0.2, 0.3), x) #> Warning: Could not calculate alpha. 0 returned #> Warning: alpha =  0 #>            [,1]      [,2]     [,3] #>  [1,]  2.287637  9.135401 11.42304 #>  [2,]  1.947004 11.091959 13.03896 #>  [3,]  2.419759 12.981869 15.40163 #>  [4,]  4.186765 13.098180 17.28494 #>  [5,]  3.387029 16.122526 19.50955 #>  [6,]  7.728568 15.967254 23.69582 #>  [7,]  6.121133 17.886376 24.00751 #>  [8,]  9.040144 16.392123 25.43227 #>  [9,] 10.483649 18.810724 29.29437 #> [10,]  8.520609 19.423993 27.94460 #> attr(,\"alpha\") #> [1] 0"},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCaddGen.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression-based SDC Tools - Synthetic addition â€” RegSDCaddGen","title":"Regression-based SDC Tools - Synthetic addition â€” RegSDCaddGen","text":"Residuals arbitrary data synthetic addition","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCaddGen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression-based SDC Tools - Synthetic addition â€” RegSDCaddGen","text":"","code":"RegSDCaddGen(   y,   yStart,   x = NULL,   epsAlpha = 1e-07,   AlphaHandler = warning,   alphaAttr = TRUE,   makeunique = TRUE,   ensureIntercept = TRUE )"},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCaddGen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression-based SDC Tools - Synthetic addition â€” RegSDCaddGen","text":"y Matrix confidential variables yStart Arbitrary data whose residuals used x Matrix non-confidential variables epsAlpha Precision constant alpha calculation AlphaHandler Function (warning stop) used alpha<1 alphaAttr TRUE alpha attribute output makeunique Parameter used GenQR ensureIntercept Whether ensure/include constant term. Non-NULL x subjected EnsureIntercept","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCaddGen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regression-based SDC Tools - Synthetic addition â€” RegSDCaddGen","text":"Generated version y","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCaddGen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regression-based SDC Tools - Synthetic addition â€” RegSDCaddGen","text":"Use epsAlpha=NULL avoid calculation alpha. Use alpha (<1) produce warning. Input matrices subjected EnsureMatrix.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCaddGen.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Regression-based SDC Tools - Synthetic addition â€” RegSDCaddGen","text":"Ã˜yvind Langsrud","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCcomp.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression-based SDC Tools - Component score correlation control â€” RegSDCcomp","title":"Regression-based SDC Tools - Component score correlation control â€” RegSDCcomp","text":"Implementation equation 8 paper.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCcomp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression-based SDC Tools - Component score correlation control â€” RegSDCcomp","text":"","code":"RegSDCcomp(   y,   compCorr = NA,   x = NULL,   doSVD = FALSE,   makeunique = TRUE,   ensureIntercept = TRUE )"},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCcomp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression-based SDC Tools - Component score correlation control â€” RegSDCcomp","text":"y Matrix confidential variables compCorr Required component score  correlations (possibly recycled) x Matrix non-confidential variables doSVD SVD TRUE QR FALSE makeunique Parameter used GenQR ensureIntercept Whether ensure/include constant term. Non-NULL x subjected EnsureIntercept","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCcomp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regression-based SDC Tools - Component score correlation control â€” RegSDCcomp","text":"Generated version y","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCcomp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regression-based SDC Tools - Component score correlation control â€” RegSDCcomp","text":"NA component score correlation means independent random. Input matrices subjected EnsureMatrix.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCcomp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Regression-based SDC Tools - Component score correlation control â€” RegSDCcomp","text":"Ã˜yvind Langsrud","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCcomp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regression-based SDC Tools - Component score correlation control â€” RegSDCcomp","text":"","code":"x <- matrix(1:10, 10, 1) y <- matrix(rnorm(30) + 1:30, 10, 3)  # Same as IPSO (RegSDCipso) RegSDCcomp(y, NA, x) #>            [,1]     [,2]     [,3] #>  [1,] 0.8317548 10.52484 21.38367 #>  [2,] 2.2396118 11.34822 22.75468 #>  [3,] 4.6698188 13.12409 22.96191 #>  [4,] 4.2293614 14.15172 25.04092 #>  [5,] 5.9821308 14.56800 26.79894 #>  [6,] 4.9595102 16.49727 26.99543 #>  [7,] 5.3957966 16.19149 27.70459 #>  [8,] 7.0159493 17.51957 26.58577 #>  [9,] 7.1895163 19.88291 28.35850 #> [10,] 9.2620562 20.52317 29.21500  # Using QR and SVD yQR <- RegSDCcomp(y, c(0.1, 0.2, NA), x) ySVD <- RegSDCcomp(y, c(0.1, 0.2, NA), x, doSVD = TRUE)  # Calculation of residuals r <- residuals(lm(y ~ x)) rQR <- residuals(lm(yQR ~ x)) rSVD <- residuals(lm(ySVD ~ x))  # Correlations for two first components as required diag(cor(GenQR(r)$Q, GenQR(rQR)$Q)) #> [1] 0.1000000 0.2000000 0.1373426 diag(cor(GenQR(r, doSVD = TRUE)$Q, GenQR(rSVD, doSVD = TRUE)$Q)) #> [1] 0.1000000 0.2000000 0.5668663  # Identical covariance matrices cov(yQR) - cov(ySVD) #>               [,1]          [,2]          [,3] #> [1,] -4.440892e-15 -1.065814e-14 -7.105427e-15 #> [2,] -1.065814e-14 -2.131628e-14 -1.421085e-14 #> [3,] -7.105427e-15 -1.421085e-14 -7.105427e-15 cov(rQR) - cov(rSVD) #>               [,1]          [,2]          [,3] #> [1,] -4.440892e-16 -1.484923e-15 -4.024558e-16 #> [2,] -1.484923e-15 -3.330669e-16 -1.630640e-16 #> [3,] -4.024558e-16 -1.630640e-16  2.664535e-15  # Identical regression results summary(lm(y[, 1] ~ x)) #>  #> Call: #> lm(formula = y[, 1] ~ x) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -1.5674 -0.4055  0.1461  0.3306  1.1205  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  1.01990    0.61025   1.671    0.133     #> x            0.75594    0.09835   7.686 5.82e-05 *** #> --- #> Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1 #>  #> Residual standard error: 0.8933 on 8 degrees of freedom #> Multiple R-squared:  0.8807,\tAdjusted R-squared:  0.8658  #> F-statistic: 59.08 on 1 and 8 DF,  p-value: 5.818e-05 #>  summary(lm(yQR[, 1] ~ x)) #>  #> Call: #> lm(formula = yQR[, 1] ~ x) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -1.0724 -0.6544 -0.2782  0.6340  1.2333  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  1.01990    0.61025   1.671    0.133     #> x            0.75594    0.09835   7.686 5.82e-05 *** #> --- #> Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1 #>  #> Residual standard error: 0.8933 on 8 degrees of freedom #> Multiple R-squared:  0.8807,\tAdjusted R-squared:  0.8658  #> F-statistic: 59.08 on 1 and 8 DF,  p-value: 5.818e-05 #>  summary(lm(ySVD[, 1] ~ x)) #>  #> Call: #> lm(formula = ySVD[, 1] ~ x) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -0.9801 -0.5008 -0.2042  0.1629  2.0462  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  1.01990    0.61025   1.671    0.133     #> x            0.75594    0.09835   7.686 5.82e-05 *** #> --- #> Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1 #>  #> Residual standard error: 0.8933 on 8 degrees of freedom #> Multiple R-squared:  0.8807,\tAdjusted R-squared:  0.8658  #> F-statistic: 59.08 on 1 and 8 DF,  p-value: 5.818e-05 #>"},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that returns a dataset â€” RegSDCdata","title":"Function that returns a dataset â€” RegSDCdata","text":"Function returns dataset","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that returns a dataset â€” RegSDCdata","text":"","code":"RegSDCdata(dataset)"},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function that returns a dataset â€” RegSDCdata","text":"dataset Name data set within RegSDC package","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function that returns a dataset â€” RegSDCdata","text":"data frame","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function that returns a dataset â€” RegSDCdata","text":"sec7data: Data section 7 paper data frame sec7y: Y section 7 paper matrix sec7x: X section 7 paper matrix sec7z: Z section 7 paper matrix sec7xAll: Xall section 7 paper matrix sec7zAll: Zall section 7 paper matrix sec7zAllSupp: Zall suppressed values set NA","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCdata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function that returns a dataset â€” RegSDCdata","text":"Ã˜yvind Langsrud","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function that returns a dataset â€” RegSDCdata","text":"","code":"RegSDCdata(\"sec7data\") #>     rows  cols  y   z suppressed #> 1  Total Total NA 201        201 #> 2  Total  col1 NA  34         34 #> 3  Total  col2 NA  61         61 #> 4  Total  col3 NA  63         63 #> 5  Total  col4 NA  43         43 #> 6   row1 Total NA  76         76 #> 7   row1  col1  3   3         NA #> 8   row1  col2 11  11         NA #> 9   row1  col3 32  32         32 #> 10  row1  col4 30  30         30 #> 11  row2 Total NA  31         31 #> 12  row2  col1  1   1         NA #> 13  row2  col2  9   9         NA #> 14  row2  col3 13  13         NA #> 15  row2  col4  8   8          8 #> 16  row3 Total NA  38         38 #> 17  row3  col1 12  12         12 #> 18  row3  col2 22  22         22 #> 19  row3  col3  2   2         NA #> 20  row3  col4  2   2         NA #> 21  row4 Total NA  56         56 #> 22  row4  col1 18  18         NA #> 23  row4  col2 19  19         19 #> 24  row4  col3 16  16         16 #> 25  row4  col4  3   3         NA RegSDCdata(\"sec7y\") #>           freq #> row1_col1    3 #> row2_col1    1 #> row3_col1   12 #> row4_col1   18 #> row1_col2   11 #> row2_col2    9 #> row3_col2   22 #> row4_col2   19 #> row1_col3   32 #> row2_col3   13 #> row3_col3    2 #> row4_col3   16 #> row1_col4   30 #> row2_col4    8 #> row3_col4    2 #> row4_col4    3 RegSDCdata(\"sec7x\") #>           Total:Total Total:col1 Total:col2 Total:col3 Total:col4 row1:Total #> row1_col1           1          1          0          0          0          1 #> row2_col1           1          1          0          0          0          0 #> row3_col1           1          1          0          0          0          0 #> row4_col1           1          1          0          0          0          0 #> row1_col2           1          0          1          0          0          1 #> row2_col2           1          0          1          0          0          0 #> row3_col2           1          0          1          0          0          0 #> row4_col2           1          0          1          0          0          0 #> row1_col3           1          0          0          1          0          1 #> row2_col3           1          0          0          1          0          0 #> row3_col3           1          0          0          1          0          0 #> row4_col3           1          0          0          1          0          0 #> row1_col4           1          0          0          0          1          1 #> row2_col4           1          0          0          0          1          0 #> row3_col4           1          0          0          0          1          0 #> row4_col4           1          0          0          0          1          0 #>           row1:col3 row1:col4 row2:Total row2:col4 row3:Total row3:col1 #> row1_col1         0         0          0         0          0         0 #> row2_col1         0         0          1         0          0         0 #> row3_col1         0         0          0         0          1         1 #> row4_col1         0         0          0         0          0         0 #> row1_col2         0         0          0         0          0         0 #> row2_col2         0         0          1         0          0         0 #> row3_col2         0         0          0         0          1         0 #> row4_col2         0         0          0         0          0         0 #> row1_col3         1         0          0         0          0         0 #> row2_col3         0         0          1         0          0         0 #> row3_col3         0         0          0         0          1         0 #> row4_col3         0         0          0         0          0         0 #> row1_col4         0         1          0         0          0         0 #> row2_col4         0         0          1         1          0         0 #> row3_col4         0         0          0         0          1         0 #> row4_col4         0         0          0         0          0         0 #>           row3:col2 row4:Total row4:col2 row4:col3 #> row1_col1         0          0         0         0 #> row2_col1         0          0         0         0 #> row3_col1         0          0         0         0 #> row4_col1         0          1         0         0 #> row1_col2         0          0         0         0 #> row2_col2         0          0         0         0 #> row3_col2         1          0         0         0 #> row4_col2         0          1         1         0 #> row1_col3         0          0         0         0 #> row2_col3         0          0         0         0 #> row3_col3         0          0         0         0 #> row4_col3         0          1         0         1 #> row1_col4         0          0         0         0 #> row2_col4         0          0         0         0 #> row3_col4         0          0         0         0 #> row4_col4         0          1         0         0 RegSDCdata(\"sec7z\") #>             freq #> Total:Total  201 #> Total:col1    34 #> Total:col2    61 #> Total:col3    63 #> Total:col4    43 #> row1:Total    76 #> row1:col3     32 #> row1:col4     30 #> row2:Total    31 #> row2:col4      8 #> row3:Total    38 #> row3:col1     12 #> row3:col2     22 #> row4:Total    56 #> row4:col2     19 #> row4:col3     16 RegSDCdata(\"sec7xAll\") #>           Total:Total Total:col1 Total:col2 Total:col3 Total:col4 row1:Total #> row1_col1           1          1          0          0          0          1 #> row2_col1           1          1          0          0          0          0 #> row3_col1           1          1          0          0          0          0 #> row4_col1           1          1          0          0          0          0 #> row1_col2           1          0          1          0          0          1 #> row2_col2           1          0          1          0          0          0 #> row3_col2           1          0          1          0          0          0 #> row4_col2           1          0          1          0          0          0 #> row1_col3           1          0          0          1          0          1 #> row2_col3           1          0          0          1          0          0 #> row3_col3           1          0          0          1          0          0 #> row4_col3           1          0          0          1          0          0 #> row1_col4           1          0          0          0          1          1 #> row2_col4           1          0          0          0          1          0 #> row3_col4           1          0          0          0          1          0 #> row4_col4           1          0          0          0          1          0 #>           row1:col1 row1:col2 row1:col3 row1:col4 row2:Total row2:col1 #> row1_col1         1         0         0         0          0         0 #> row2_col1         0         0         0         0          1         1 #> row3_col1         0         0         0         0          0         0 #> row4_col1         0         0         0         0          0         0 #> row1_col2         0         1         0         0          0         0 #> row2_col2         0         0         0         0          1         0 #> row3_col2         0         0         0         0          0         0 #> row4_col2         0         0         0         0          0         0 #> row1_col3         0         0         1         0          0         0 #> row2_col3         0         0         0         0          1         0 #> row3_col3         0         0         0         0          0         0 #> row4_col3         0         0         0         0          0         0 #> row1_col4         0         0         0         1          0         0 #> row2_col4         0         0         0         0          1         0 #> row3_col4         0         0         0         0          0         0 #> row4_col4         0         0         0         0          0         0 #>           row2:col2 row2:col3 row2:col4 row3:Total row3:col1 row3:col2 #> row1_col1         0         0         0          0         0         0 #> row2_col1         0         0         0          0         0         0 #> row3_col1         0         0         0          1         1         0 #> row4_col1         0         0         0          0         0         0 #> row1_col2         0         0         0          0         0         0 #> row2_col2         1         0         0          0         0         0 #> row3_col2         0         0         0          1         0         1 #> row4_col2         0         0         0          0         0         0 #> row1_col3         0         0         0          0         0         0 #> row2_col3         0         1         0          0         0         0 #> row3_col3         0         0         0          1         0         0 #> row4_col3         0         0         0          0         0         0 #> row1_col4         0         0         0          0         0         0 #> row2_col4         0         0         1          0         0         0 #> row3_col4         0         0         0          1         0         0 #> row4_col4         0         0         0          0         0         0 #>           row3:col3 row3:col4 row4:Total row4:col1 row4:col2 row4:col3 #> row1_col1         0         0          0         0         0         0 #> row2_col1         0         0          0         0         0         0 #> row3_col1         0         0          0         0         0         0 #> row4_col1         0         0          1         1         0         0 #> row1_col2         0         0          0         0         0         0 #> row2_col2         0         0          0         0         0         0 #> row3_col2         0         0          0         0         0         0 #> row4_col2         0         0          1         0         1         0 #> row1_col3         0         0          0         0         0         0 #> row2_col3         0         0          0         0         0         0 #> row3_col3         1         0          0         0         0         0 #> row4_col3         0         0          1         0         0         1 #> row1_col4         0         0          0         0         0         0 #> row2_col4         0         0          0         0         0         0 #> row3_col4         0         1          0         0         0         0 #> row4_col4         0         0          1         0         0         0 #>           row4:col4 #> row1_col1         0 #> row2_col1         0 #> row3_col1         0 #> row4_col1         0 #> row1_col2         0 #> row2_col2         0 #> row3_col2         0 #> row4_col2         0 #> row1_col3         0 #> row2_col3         0 #> row3_col3         0 #> row4_col3         0 #> row1_col4         0 #> row2_col4         0 #> row3_col4         0 #> row4_col4         1 RegSDCdata(\"sec7zAll\") #>             freq #> Total:Total  201 #> Total:col1    34 #> Total:col2    61 #> Total:col3    63 #> Total:col4    43 #> row1:Total    76 #> row1:col1      3 #> row1:col2     11 #> row1:col3     32 #> row1:col4     30 #> row2:Total    31 #> row2:col1      1 #> row2:col2      9 #> row2:col3     13 #> row2:col4      8 #> row3:Total    38 #> row3:col1     12 #> row3:col2     22 #> row3:col3      2 #> row3:col4      2 #> row4:Total    56 #> row4:col1     18 #> row4:col2     19 #> row4:col3     16 #> row4:col4      3 RegSDCdata(\"sec7zAllSupp\") #>             freq #> Total:Total  201 #> Total:col1    34 #> Total:col2    61 #> Total:col3    63 #> Total:col4    43 #> row1:Total    76 #> row1:col1     NA #> row1:col2     NA #> row1:col3     32 #> row1:col4     30 #> row2:Total    31 #> row2:col1     NA #> row2:col2     NA #> row2:col3     NA #> row2:col4      8 #> row3:Total    38 #> row3:col1     12 #> row3:col2     22 #> row3:col3     NA #> row3:col4     NA #> row4:Total    56 #> row4:col1     NA #> row4:col2     19 #> row4:col3     16 #> row4:col4     NA"},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCgen.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression-based SDC Tools - General data generation â€” RegSDCgen","title":"Regression-based SDC Tools - General data generation â€” RegSDCgen","text":"IPSO QR SVD, scores arbitrary data, ROMM","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCgen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression-based SDC Tools - General data generation â€” RegSDCgen","text":"","code":"RegSDCgen(   y,   x = NULL,   doSVD = FALSE,   yNew = NULL,   lambda = Inf,   makeunique = TRUE,   ensureIntercept = TRUE,   returnParts = FALSE )"},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCgen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression-based SDC Tools - General data generation â€” RegSDCgen","text":"y Matrix confidential variables x Matrix non-confidential variables doSVD SVD TRUE QR FALSE yNew Matrix y-data new scores (simulated NULL) lambda ROMM parameter makeunique Parameter used GenQR ensureIntercept Whether ensure/include constant term. Non-NULL x subjected EnsureIntercept returnParts Alternative output two matrices: yHat (fitted) yRes (generated residuals).","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCgen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regression-based SDC Tools - General data generation â€” RegSDCgen","text":"Generated version y","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCgen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regression-based SDC Tools - General data generation â€” RegSDCgen","text":"doSVD effect decomposition y yNew. Input matrices subjected EnsureMatrix.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCgen.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Regression-based SDC Tools - General data generation â€” RegSDCgen","text":"Ã˜yvind Langsrud","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCgen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regression-based SDC Tools - General data generation â€” RegSDCgen","text":"","code":"exY <- matrix(rnorm(15), 5, 3) RegSDCgen(exY) #>            [,1]       [,2]        [,3] #> [1,] -0.7088295 -1.3814567  0.83508739 #> [2,]  0.9383451  0.2590207 -0.73284517 #> [3,] -1.3569270 -3.0413493 -0.07266568 #> [4,]  0.5048005  0.7063219  1.16097718 #> [5,] -1.9227544 -0.7839876  1.40558509 RegSDCgen(exY, yNew = exY + 0.001 * matrix(rnorm(15), 5, 3))  # Close to exY #>             [,1]       [,2]       [,3] #> [1,] -2.01812660 -3.1022755  0.8084933 #> [2,] -1.56220311 -0.7722135  0.8136519 #> [3,]  0.64551020  0.6183592  0.2689218 #> [4,]  0.48640803 -1.2834272 -0.8571496 #> [5,] -0.09695375  0.2981060  1.5622214 RegSDCgen(exY, lambda = 0.001)  # Close to exY #>             [,1]       [,2]       [,3] #> [1,] -2.01704339 -3.1026396  0.8085369 #> [2,] -1.56493850 -0.7731609  0.8167572 #> [3,]  0.64323583  0.6158624  0.2688944 #> [4,]  0.48597111 -1.2825034 -0.8581061 #> [5,] -0.09259029  0.3009906  1.5600564"},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDChybrid.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression-based SDC Tools - Generalized microaggregation â€” RegSDChybrid","title":"Regression-based SDC Tools - Generalized microaggregation â€” RegSDChybrid","text":"Implementation methodology section 6 paper","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDChybrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression-based SDC Tools - Generalized microaggregation â€” RegSDChybrid","text":"","code":"RegSDChybrid(   y,   clusters = NULL,   xLocal = NULL,   xGlobal = NULL,   clusterPieces = NULL,   xClusterPieces = NULL,   groupedClusters = NULL,   xGroupedClusters = NULL,   alternative = NULL,   alpha = NULL,   ySim = NULL,   returnParts = FALSE,   epsAlpha = 1e-07,   makeunique = TRUE,   tolerance = sqrt(.Machine$double.eps) )"},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDChybrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression-based SDC Tools - Generalized microaggregation â€” RegSDChybrid","text":"y Matrix confidential variables clusters Vector cluster coding xLocal Matrix x-variables crossed clusters xGlobal Matrix x-variables crossed clusters clusterPieces Vector coding cluster pieces xClusterPieces Matrix x-variables crossed cluster pieces groupedClusters Vector coding grouped clusters xGroupedClusters Matrix x-variables crossed grouped clusters alternative One \"\" (default), \"\", \"b\" \"c\" alpha Possible specify parameter used internally alternative \"c\" ySim Possible specify internally simulated data manually returnParts Alternative output six matrices: y1 y2 (fitted),    e3s e4s (new residuals),   e3 e4 (original residuals) epsAlpha Precision constant alpha calculation makeunique Parameter used GenQR tolerance Parameter Cdiff used within algorithm","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDChybrid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regression-based SDC Tools - Generalized microaggregation â€” RegSDChybrid","text":"Generated version y","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDChybrid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regression-based SDC Tools - Generalized microaggregation â€” RegSDChybrid","text":"Input matrices subjected EnsureMatrix. Necessary constant terms (intercept) automatically included. , column ones needed input matrices.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDChybrid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Regression-based SDC Tools - Generalized microaggregation â€” RegSDChybrid","text":"Ã˜yvind Langsrud","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDChybrid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regression-based SDC Tools - Generalized microaggregation â€” RegSDChybrid","text":"","code":"################################################# # Generate example data for introductory examples #################################################  y <- matrix(rnorm(30) + 1:30, 10, 3) x <- matrix(1:10, 10, 1)  # x <- 1:10 is equivalent  # Same as RegSDCipso(y) yOut <- RegSDChybrid(y)  # With a single cluster both are same as RegSDCipso(y, x) yOut <- RegSDChybrid(y, xLocal = x) yOut <- RegSDChybrid(y, xGlobal = x)  # Define two clusters clust <- rep(1:2, each = 5)  # MHa and MHb in paper yMHa <- RegSDChybrid(y, clusters = clust, xLocal = x) yMHb <- RegSDChybrid(y, clusterPieces = clust, xLocal = x)  # An extended variant of MHb as mentioned in paper paragraph below definition of MHa/MHb yMHbExt <- RegSDChybrid(y, clusterPieces = clust, xClusterPieces = x)  # Identical means within clusters aggregate(y, list(clust = clust), mean) #>   clust       V1       V2       V3 #> 1     1 2.616377 12.40017 22.38400 #> 2     2 7.031693 18.11947 28.33711 aggregate(yMHa, list(clust = clust), mean) #>   clust       V1       V2       V3 #> 1     1 2.616377 12.40017 22.38400 #> 2     2 7.031693 18.11947 28.33711 aggregate(yMHb, list(clust = clust), mean) #>   clust       V1       V2       V3 #> 1     1 2.616377 12.40017 22.38400 #> 2     2 7.031693 18.11947 28.33711 aggregate(yMHbExt, list(clust = clust), mean) #>   clust       V1       V2       V3 #> 1     1 2.616377 12.40017 22.38400 #> 2     2 7.031693 18.11947 28.33711  # Identical global regression results summary(lm(y[, 1] ~ x)) #>  #> Call: #> lm(formula = y[, 1] ~ x) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.99930 -0.36426 -0.24060 -0.09118  2.21208  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  -0.6580     0.6594  -0.998    0.348     #> x             0.9967     0.1063   9.379 1.37e-05 *** #> --- #> Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1 #>  #> Residual standard error: 0.9652 on 8 degrees of freedom #> Multiple R-squared:  0.9166,\tAdjusted R-squared:  0.9062  #> F-statistic: 87.97 on 1 and 8 DF,  p-value: 1.367e-05 #>  summary(lm(yMHa[, 1] ~ x)) #>  #> Call: #> lm(formula = yMHa[, 1] ~ x) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -1.5952 -0.4758 -0.1294  0.4943  1.6172  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  -0.6580     0.6594  -0.998    0.348     #> x             0.9967     0.1063   9.379 1.37e-05 *** #> --- #> Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1 #>  #> Residual standard error: 0.9652 on 8 degrees of freedom #> Multiple R-squared:  0.9166,\tAdjusted R-squared:  0.9062  #> F-statistic: 87.97 on 1 and 8 DF,  p-value: 1.367e-05 #>  summary(lm(yMHb[, 1] ~ x)) #>  #> Call: #> lm(formula = yMHb[, 1] ~ x) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -1.8857 -0.5874  0.2406  0.5186  1.1848  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  -0.6580     0.6594  -0.998    0.348     #> x             0.9967     0.1063   9.379 1.37e-05 *** #> --- #> Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1 #>  #> Residual standard error: 0.9652 on 8 degrees of freedom #> Multiple R-squared:  0.9166,\tAdjusted R-squared:  0.9062  #> F-statistic: 87.97 on 1 and 8 DF,  p-value: 1.367e-05 #>  summary(lm(yMHbExt[, 1] ~ x)) #>  #> Call: #> lm(formula = yMHbExt[, 1] ~ x) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -1.1368 -0.6332 -0.4726  0.9707  1.2041  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  -0.6580     0.6594  -0.998    0.348     #> x             0.9967     0.1063   9.379 1.37e-05 *** #> --- #> Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1 #>  #> Residual standard error: 0.9652 on 8 degrees of freedom #> Multiple R-squared:  0.9166,\tAdjusted R-squared:  0.9062  #> F-statistic: 87.97 on 1 and 8 DF,  p-value: 1.367e-05 #>   # MHa: Identical local regression results summary(lm(y[, 1] ~ x, subset = clust == 1)) #>  #> Call: #> lm(formula = y[, 1] ~ x, subset = clust == 1) #>  #> Residuals: #>        1        2        3        4        5  #> -0.02312 -0.03791 -0.54574  1.29771 -0.69093  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)  -2.2644     0.9500  -2.384   0.0973 . #> x             1.6269     0.2864   5.680   0.0108 * #> --- #> Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1 #>  #> Residual standard error: 0.9058 on 3 degrees of freedom #> Multiple R-squared:  0.9149,\tAdjusted R-squared:  0.8866  #> F-statistic: 32.26 on 1 and 3 DF,  p-value: 0.01081 #>  summary(lm(yMHa[, 1] ~ x, subset = clust == 1)) #>  #> Call: #> lm(formula = yMHa[, 1] ~ x, subset = clust == 1) #>  #> Residuals: #>        1        2        3        4        5  #> -0.61897  0.01182  1.33297 -0.22551 -0.50031  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)  -2.2644     0.9500  -2.384   0.0973 . #> x             1.6269     0.2864   5.680   0.0108 * #> --- #> Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1 #>  #> Residual standard error: 0.9058 on 3 degrees of freedom #> Multiple R-squared:  0.9149,\tAdjusted R-squared:  0.8866  #> F-statistic: 32.26 on 1 and 3 DF,  p-value: 0.01081 #>   # MHb: Different results summary(lm(yMHb[, 1] ~ x, subset = clust == 1)) #>  #> Call: #> lm(formula = yMHb[, 1] ~ x, subset = clust == 1) #>  #> Residuals: #>        1        2        3        4        5  #>  0.38023 -0.06638 -0.93097  0.54016  0.07696  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)  -0.6187     0.6940  -0.892   0.4383   #> x             1.0784     0.2092   5.154   0.0142 * #> --- #> Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1 #>  #> Residual standard error: 0.6617 on 3 degrees of freedom #> Multiple R-squared:  0.8985,\tAdjusted R-squared:  0.8647  #> F-statistic: 26.56 on 1 and 3 DF,  p-value: 0.01416 #>   # MHbExt: Same estimates and different std. errors summary(lm(yMHbExt[, 1] ~ x, subset = clust == 1)) #>  #> Call: #> lm(formula = yMHbExt[, 1] ~ x, subset = clust == 1) #>  #> Residuals: #>        1        2        3        4        5  #> -0.16064 -0.27625  0.69392  0.08347 -0.34050  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)    #> (Intercept)  -2.2644     0.5090  -4.449  0.02113 *  #> x             1.6269     0.1535  10.601  0.00179 ** #> --- #> Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1 #>  #> Residual standard error: 0.4853 on 3 degrees of freedom #> Multiple R-squared:  0.974,\tAdjusted R-squared:  0.9653  #> F-statistic: 112.4 on 1 and 3 DF,  p-value: 0.001793 #>   ################################################### #  Generate example data for more advanced examples ################################################### x <- matrix((1:90) * (1 + runif(90)), 30, 3) x1 <- x[, 1] x2 <- x[, 2] x3 <- x[, 3] y <- matrix(rnorm(90), 30, 3) + x clust <- paste(\"c\", rep(1:3, each = 10), sep = \"\")  ######## Run main algorithm z0 <- RegSDChybrid(y, clusters = clust, xLocal = x3, xGlobal = cbind(x1, x2))  # Corresponding models by lm lmy <- lm(y ~ clust + x1 + x2 + x3:clust) lm0 <- lm(z0 ~ clust + x1 + x2 + x3:clust)  # Preserved regression coef (x3 within clusters) coef(lmy) - coef(lm0) #>                      [,1]          [,2]          [,3] #> (Intercept) -8.770762e-15 -3.241851e-14  1.178085e-13 #> clustc2     -3.996803e-15 -6.661338e-16 -1.496303e-13 #> clustc3     -4.773959e-14 -4.174439e-14 -7.949197e-14 #> x1           2.220446e-16  6.657001e-16 -1.220812e-15 #> x2           5.898060e-17  0.000000e+00 -6.834810e-16 #> clustc1:x3   8.847090e-17 -3.361027e-18 -4.440892e-16 #> clustc2:x3   8.326673e-17  7.806256e-17  8.881784e-16 #> clustc3:x3   2.853620e-16  3.586541e-16  5.551115e-16  # Preservation of x3 coef locally can also be seen by local regression coef(lm(y ~ x3, subset = clust == \"c2\")) - coef(lm(z0 ~ x3, subset = clust == \"c2\")) #>                      [,1]          [,2]          [,3] #> (Intercept) -1.776357e-14 -4.263256e-14 -1.079137e-13 #> x3           6.938894e-17  2.220446e-16  6.661338e-16  # Covariance matrix preserved cov(resid(lmy)) - cov(resid(lm0)) #>               [,1]          [,2]          [,3] #> [1,] -1.154632e-14 -1.665335e-15  3.566591e-15 #> [2,] -1.665335e-15  1.887379e-15 -2.081668e-15 #> [3,]  3.566591e-15 -2.081668e-15  3.774758e-15  # But not preserved within clusters cov(resid(lmy)[clust == \"c2\", ]) - cov(resid(lm0)[clust == \"c2\", ]) #>             [,1]        [,2]         [,3] #> [1,] -0.05283525  0.02628186  0.041320945 #> [2,]  0.02628186  0.11017441 -0.118935218 #> [3,]  0.04132094 -0.11893522 -0.007472039  ######## Modification (a) za <- RegSDChybrid(y, clusters = clust, xLocal = x3, xGlobal = cbind(x1, x2), alternative = \"a\") lma <- lm(za ~ clust + x1 + x2 + x3:clust)  # Now covariance matrices preserved within clusters cov(resid(lmy)[clust == \"c2\", ]) - cov(resid(lma)[clust == \"c2\", ]) #>               [,1]          [,2]          [,3] #> [1,]  1.776357e-15 -2.053913e-15 -3.275158e-15 #> [2,] -2.053913e-15  1.132427e-14 -5.107026e-15 #> [3,] -3.275158e-15 -5.107026e-15  1.887379e-15  # If we estimate coef for x1 and x2 within clusters,  # they become identical and identical to global estimates coef(lma) #>                     [,1]          [,2]         [,3] #> (Intercept) -0.853660177 -0.3350771414 -0.116021373 #> clustc2     -1.502492508  1.3682670844 -0.178200192 #> clustc3     -1.894139410 -0.4133242439  2.567418769 #> x1           1.037195424 -0.0038745052  0.003657673 #> x2           0.008993409  1.0099219019 -0.013992845 #> clustc1:x3   0.005125876  0.0009687508  1.011450684 #> clustc2:x3   0.008278076 -0.0124104955  1.007585746 #> clustc3:x3   0.005526337  0.0018204153  0.986441964 coef(lm(za ~ clust + x1:clust + x2:clust + x3:clust)) #>                     [,1]          [,2]         [,3] #> (Intercept) -0.853660177 -0.3350771414 -0.116021373 #> clustc2     -1.502492508  1.3682670844 -0.178200192 #> clustc3     -1.894139410 -0.4133242439  2.567418769 #> clustc1:x1   1.037195424 -0.0038745052  0.003657673 #> clustc2:x1   1.037195424 -0.0038745052  0.003657673 #> clustc3:x1   1.037195424 -0.0038745052  0.003657673 #> clustc1:x2   0.008993409  1.0099219019 -0.013992845 #> clustc2:x2   0.008993409  1.0099219019 -0.013992845 #> clustc3:x2   0.008993409  1.0099219019 -0.013992845 #> clustc1:x3   0.005125876  0.0009687508  1.011450684 #> clustc2:x3   0.008278076 -0.0124104955  1.007585746 #> clustc3:x3   0.005526337  0.0018204153  0.986441964  ######## Modification (c) with automatic calculation of alpha  # The result depends on the randomly generated data # When the result is that alpha=1, modification (b) is equivalent zc <- RegSDChybrid(y, clusters = clust, xLocal = x3, xGlobal = cbind(x1, x2), alternative = \"c\") #>  #>                c1: clusterAlpha =   1.880, Alpha = 1.000 #>                c2: clusterAlpha =   3.065, Alpha = 1.000 #>                c3: clusterAlpha =   1.321, Alpha = 1.000 lmc <- lm(zc ~ clust + x1 + x2 + x3:clust)  # Preserved regression coef as above coef(lmy) - coef(lmc) #>                      [,1]          [,2]          [,3] #> (Intercept) -2.009504e-14 -1.576517e-14  5.676015e-15 #> clustc2      0.000000e+00 -6.439294e-15 -1.849076e-13 #> clustc3     -4.130030e-14 -2.686740e-14 -1.456613e-13 #> x1           2.220446e-16  2.662801e-16 -4.401861e-16 #> x2           1.543904e-16 -2.220446e-16  3.313322e-16 #> clustc1:x3   9.194034e-17 -3.068292e-17 -4.440892e-16 #> clustc2:x3   4.857226e-17  7.979728e-17  1.110223e-15 #> clustc3:x3   2.159731e-16  2.589075e-16  8.881784e-16  # Again covariance matrices preserved within clusters cov(resid(lmy)[clust == \"c2\", ]) - cov(resid(lmc)[clust == \"c2\", ]) #>              [,1]         [,2]          [,3] #> [1,] 2.109424e-15 3.885781e-16  2.942091e-15 #> [2,] 3.885781e-16 2.442491e-15  5.273559e-15 #> [3,] 2.942091e-15 5.273559e-15 -1.454392e-14  # If we estimate coef for x1 and x2 within clusters,  # results are different from modification (a) above coef(lmc) #>                     [,1]          [,2]         [,3] #> (Intercept) -0.853660177 -0.3350771414 -0.116021373 #> clustc2     -1.502492508  1.3682670844 -0.178200192 #> clustc3     -1.894139410 -0.4133242439  2.567418769 #> x1           1.037195424 -0.0038745052  0.003657673 #> x2           0.008993409  1.0099219019 -0.013992845 #> clustc1:x3   0.005125876  0.0009687508  1.011450684 #> clustc2:x3   0.008278076 -0.0124104955  1.007585746 #> clustc3:x3   0.005526337  0.0018204153  0.986441964 coef(lm(zc ~ clust + x1:clust + x2:clust + x3:clust)) #>                     [,1]         [,2]        [,3] #> (Intercept)  0.148294545  0.743268966 -1.92253955 #> clustc2     -3.316413326 -0.144389429  1.16173957 #> clustc3     -4.070496639 -1.673605741  8.88917470 #> clustc1:x1   1.046242317  0.066634617 -0.02923443 #> clustc2:x1   1.054697315 -0.046662381  0.06809831 #> clustc3:x1   1.043717774 -0.004080565 -0.03469546 #> clustc1:x2  -0.011894602  0.982859060  0.02491830 #> clustc2:x2   0.016711386  1.022488986 -0.01835825 #> clustc3:x2   0.021789554  1.012583585 -0.05577610 #> clustc1:x3   0.005652463 -0.001251337  1.01126158 #> clustc2:x3   0.007517097 -0.007875766  1.00199499 #> clustc3:x3   0.005515666  0.001800353  0.98628208   #################################################### # Make groups of clusters (d) and cluster pieces (e) #################################################### clustGr <- paste(\"gr\", ceiling(rep(1:3, each = 10)/2 + 0.1), sep = \"\") clustP <- c(\"a\", \"a\", rep(\"b\", 28))  ######## Modifications (c), (d) and (e) zGrP <- RegSDChybrid(y, clusters = clust, clusterPieces = clustP, groupedClusters = clustGr,                      xLocal = x3, xGroupedClusters = x2, xGlobal = x1, alternative = \"c\") #>  #>                c1: clusterAlpha =   2.087, Alpha = 1.000 #>                c2: clusterAlpha =   1.304, Alpha = 1.000 #>                c3: clusterAlpha =   1.662, Alpha = 1.000  # Corresponding models by lm lmGrP <- lm(zGrP ~ clust:clustP + x1 + x2:clustGr + x3:clust - 1) lmY <- lm(y ~ clust:clustP + x1 + x2:clustGr + x3:clust - 1)  # Preserved regression coef coef(lmY) - coef(lmGrP) #>                          [,1]          [,2]          [,3] #> x1               2.220446e-16 -3.382711e-16  7.285839e-17 #> clustc1:clustPa -2.886580e-15 -3.587061e-14  1.087463e-13 #> clustc2:clustPa            NA            NA            NA #> clustc3:clustPa            NA            NA            NA #> clustc1:clustPb -3.108624e-15  2.636780e-14  3.907985e-14 #> clustc2:clustPb  2.220446e-16 -8.881784e-16 -6.328271e-14 #> clustc3:clustPb -1.953993e-14 -2.120526e-14  3.086420e-14 #> x2:clustGrgr1    1.006140e-16  8.881784e-16  7.060325e-16 #> x2:clustGrgr2   -8.066464e-17 -2.220446e-16 -7.025630e-17 #> clustc1:x3       2.255141e-17 -4.386682e-16 -4.440892e-16 #> clustc2:x3       6.158268e-17  7.979728e-17  2.220446e-16 #> clustc3:x3       2.029626e-16  3.061787e-16 -1.110223e-16  # Identical means within cluster pieces aggregate(y, list(clust = clust, clustP = clustP), mean) #>   clust clustP        V1       V2        V3 #> 1    c1      a  2.875937 45.57646  98.07293 #> 2    c1      b 11.414383 57.33851 113.35811 #> 3    c2      b 22.222100 66.88903 119.61147 #> 4    c3      b 38.492482 72.32188 124.98224 aggregate(zGrP, list(clust = clust, clustP = clustP), mean) #>   clust clustP        V1       V2        V3 #> 1    c1      a  2.875937 45.57646  98.07293 #> 2    c1      b 11.414383 57.33851 113.35811 #> 3    c2      b 22.222100 66.88903 119.61147 #> 4    c3      b 38.492482 72.32188 124.98224  # Covariance matrix preserved cov(resid(lmY)) - cov(resid(lmGrP)) #>               [,1]          [,2]          [,3] #> [1,] -5.884182e-15 -1.179612e-15 -2.248202e-15 #> [2,] -1.179612e-15  3.552714e-15  1.053324e-14 #> [3,] -2.248202e-15  1.053324e-14  1.687539e-14  # Covariance matrices preserved within clusters cov(resid(lmY)[clust == \"c2\", ]) - cov(resid(lmGrP)[clust == \"c2\", ]) #>               [,1]          [,2]          [,3] #> [1,]  5.440093e-15 -7.938095e-15 -8.326673e-16 #> [2,] -7.938095e-15  3.330669e-15  2.103873e-14 #> [3,] -8.326673e-16  2.103873e-14  2.220446e-16  # Covariance matrices not preserved within cluster pieces cov(resid(lmY)[clustP == \"a\", ]) - cov(resid(lmGrP)[clustP == \"a\", ]) #>             [,1]         [,2]        [,3] #> [1,] -0.04089730  0.056294035 -0.08208031 #> [2,]  0.05629403 -0.004892891  0.01946627 #> [3,] -0.08208031  0.019466271 -0.04426915"},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCipso.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression-based SDC Tools - Ordinary synthetic data (IPSO) â€” RegSDCipso","title":"Regression-based SDC Tools - Ordinary synthetic data (IPSO) â€” RegSDCipso","text":"Implementation equation 4 paper.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCipso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression-based SDC Tools - Ordinary synthetic data (IPSO) â€” RegSDCipso","text":"","code":"RegSDCipso(y, x = NULL, ensureIntercept = TRUE)"},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCipso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression-based SDC Tools - Ordinary synthetic data (IPSO) â€” RegSDCipso","text":"y Matrix confidential variables x Matrix non-confidential variables ensureIntercept Whether ensure/include constant term. Non-NULL x subjected EnsureIntercept","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCipso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regression-based SDC Tools - Ordinary synthetic data (IPSO) â€” RegSDCipso","text":"Generated version y","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCipso.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regression-based SDC Tools - Ordinary synthetic data (IPSO) â€” RegSDCipso","text":"Input matrices subjected EnsureMatrix.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCipso.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Regression-based SDC Tools - Ordinary synthetic data (IPSO) â€” RegSDCipso","text":"Ã˜yvind Langsrud","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCipso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regression-based SDC Tools - Ordinary synthetic data (IPSO) â€” RegSDCipso","text":"","code":"x <- matrix(1:5, 5, 1) y <- matrix(rnorm(15) + 1:15, 5, 3) ySynth <- RegSDCipso(y, x)  # Identical regression results summary(lm(y[, 1] ~ x)) #>  #> Call: #> lm(formula = y[, 1] ~ x) #>  #> Residuals: #>       1       2       3       4       5  #> -1.1012  0.9930  0.8082 -0.1907 -0.5093  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)   0.7162     1.0743   0.667   0.5527   #> x             0.8419     0.3239   2.599   0.0804 . #> --- #> Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1 #>  #> Residual standard error: 1.024 on 3 degrees of freedom #> Multiple R-squared:  0.6925,\tAdjusted R-squared:   0.59  #> F-statistic: 6.756 on 1 and 3 DF,  p-value: 0.08044 #>  summary(lm(ySynth[, 1] ~ x)) #>  #> Call: #> lm(formula = ySynth[, 1] ~ x) #>  #> Residuals: #>       1       2       3       4       5  #> -0.6954  0.1954  1.4436 -0.6917 -0.2519  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)   0.7162     1.0743   0.667   0.5527   #> x             0.8419     0.3239   2.599   0.0804 . #> --- #> Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1 #>  #> Residual standard error: 1.024 on 3 degrees of freedom #> Multiple R-squared:  0.6925,\tAdjusted R-squared:   0.59  #> F-statistic: 6.756 on 1 and 3 DF,  p-value: 0.08044 #>   # Identical covariance matrices cov(y) - cov(ySynth) #>               [,1]          [,2]          [,3] #> [1,] -8.881784e-16 -1.776357e-15 -3.108624e-15 #> [2,] -1.776357e-15 -1.776357e-15 -4.440892e-15 #> [3,] -3.108624e-15 -4.440892e-15 -8.881784e-15 cov(residuals(lm(y ~ x))) - cov(residuals(lm(ySynth ~ x))) #>               [,1]          [,2]          [,3] #> [1,] -1.110223e-16 -3.400058e-16  5.828671e-16 #> [2,] -3.400058e-16  5.551115e-16  1.665335e-16 #> [3,]  5.828671e-16  1.665335e-16 -3.608225e-16"},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCnew.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression-based SDC Tools - Scores from new data â€” RegSDCnew","title":"Regression-based SDC Tools - Scores from new data â€” RegSDCnew","text":"Implementation equation 12 paper.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCnew.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression-based SDC Tools - Scores from new data â€” RegSDCnew","text":"","code":"RegSDCnew(y, yNew, x = NULL, doSVD = FALSE, ensureIntercept = TRUE)"},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCnew.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression-based SDC Tools - Scores from new data â€” RegSDCnew","text":"y Matrix confidential variables yNew Matrix y-data new scores x Matrix non-confidential variables doSVD SVD TRUE QR FALSE ensureIntercept Whether ensure/include constant term. Non-NULL x subjected EnsureIntercept","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCnew.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regression-based SDC Tools - Scores from new data â€” RegSDCnew","text":"Generated version y","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCnew.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regression-based SDC Tools - Scores from new data â€” RegSDCnew","text":"doSVD effect decomposition y yNew. Input matrices subjected EnsureMatrix.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCnew.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Regression-based SDC Tools - Scores from new data â€” RegSDCnew","text":"Ã˜yvind Langsrud","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCnew.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regression-based SDC Tools - Scores from new data â€” RegSDCnew","text":"","code":"x <- matrix(1:5, 5, 1) y <- matrix(rnorm(15) + 1:15, 5, 3)  # Same as IPSO (RegSDCipso) RegSDCnew(y, matrix(rnorm(15), 5, 3), x) #>          [,1]      [,2]     [,3] #> [1,] 1.251707  6.806484 11.14471 #> [2,] 1.625457  7.015870 14.29224 #> [3,] 2.959632  7.798586 10.40093 #> [4,] 4.347518 10.365453 14.59771 #> [5,] 4.571298  9.533078 15.88904  # Close to y RegSDCnew(y, y + 0.001 * matrix(rnorm(15), 5, 3), x) #>          [,1]      [,2]     [,3] #> [1,] 0.799432  6.142785 12.08953 #> [2,] 2.033208  7.353694 12.45028 #> [3,] 3.363452  8.717213 10.43339 #> [4,] 4.125725 10.169521 16.27939 #> [5,] 4.433795  9.136257 15.07203"},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCromm.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression-based SDC Tools - Random orthogonal matrix masking (ROMM) â€” RegSDCromm","title":"Regression-based SDC Tools - Random orthogonal matrix masking (ROMM) â€” RegSDCromm","text":"Implementation based equations 11, 12 17 paper.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCromm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression-based SDC Tools - Random orthogonal matrix masking (ROMM) â€” RegSDCromm","text":"","code":"RegSDCromm(y, lambda = Inf, x = NULL, doSVD = FALSE, ensureIntercept = TRUE)"},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCromm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression-based SDC Tools - Random orthogonal matrix masking (ROMM) â€” RegSDCromm","text":"y Matrix confidential variables lambda ROMM parameter x Matrix non-confidential variables doSVD SVD TRUE QR FALSE ensureIntercept Whether ensure/include constant term. Non-NULL x subjected EnsureIntercept","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCromm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regression-based SDC Tools - Random orthogonal matrix masking (ROMM) â€” RegSDCromm","text":"Generated version y","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCromm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regression-based SDC Tools - Random orthogonal matrix masking (ROMM) â€” RegSDCromm","text":"doSVD effect decomposition y. exact behaviour method depends choice decomposition method sequentially phenomenon mentioned paper. similarity original data tend highest first component. Input matrices subjected EnsureMatrix.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCromm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Regression-based SDC Tools - Random orthogonal matrix masking (ROMM) â€” RegSDCromm","text":"Ã˜yvind Langsrud","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/RegSDCromm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regression-based SDC Tools - Random orthogonal matrix masking (ROMM) â€” RegSDCromm","text":"","code":"x <- matrix(1:5, 5, 1) y <- matrix(rnorm(15) + 1:15, 5, 3)  # Same as IPSO (RegSDCipso) RegSDCromm(y, Inf, x) #>          [,1]      [,2]     [,3] #> [1,] 2.700540  7.298341 12.63000 #> [2,] 2.709010  7.981590 12.84849 #> [3,] 2.904772  7.308195 12.20955 #> [4,] 5.413306  9.513246 14.40105 #> [5,] 4.906183 11.379692 15.63661  # Close to IPSO RegSDCromm(y, 100, x) #>          [,1]      [,2]     [,3] #> [1,] 2.588519  6.087369 11.52098 #> [2,] 2.891641  8.126544 13.16348 #> [3,] 2.845269  8.892081 13.43822 #> [4,] 5.432506 10.754498 15.43482 #> [5,] 4.875877  9.620571 14.16820  # Close to y RegSDCromm(y, 0.001, x) #>          [,1]      [,2]     [,3] #> [1,] 2.741093  6.530433 11.90906 #> [2,] 2.111899  7.056944 12.05533 #> [3,] 3.779154 10.099017 14.71114 #> [4,] 5.293664  9.777172 14.66110 #> [5,] 4.708002 10.017498 14.38907"},{"path":"https://olangsrud.github.io/RegSDC/reference/SuppressDec.html","id":null,"dir":"Reference","previous_headings":"","what":"Suppressed tabular data: Inner cell frequencies as decimal numbers â€” SuppressDec","title":"Suppressed tabular data: Inner cell frequencies as decimal numbers â€” SuppressDec","text":"Assume frequencies published, z, can computed inner frequencies, y, via  z = t(x) %*% y, x dummy matrix. Assuming correct suppression, function generate safe inner cell frequencies decimal numbers.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/SuppressDec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suppressed tabular data: Inner cell frequencies as decimal numbers â€” SuppressDec","text":"","code":"SuppressDec(   x,   z = NULL,   y = NULL,   suppressed = NULL,   digits = 9,   nRep = 1,   yDeduct = NULL,   resScale = NULL,   rmse = NULL,   sparseLimit = 500 )"},{"path":"https://olangsrud.github.io/RegSDC/reference/SuppressDec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suppressed tabular data: Inner cell frequencies as decimal numbers â€” SuppressDec","text":"x Dummy matrix dimensions matches z /y input. Sparse matrix (Matrix package) possible. z Frequencies published. , safe ones suppressed NA. y Inner cell frequencies (see details). suppressed Logical vector defining suppressed elements z. digits Output close whole numbers rounded using digits input RoundWhole. nRep Integer, >1, several y's generated. Extra columns output. yDeduct Values subtracted y added back calculations. Can used perform modulo method described paper (see examples). resScale Residuals scaled resScale rmse Desired root mean square error (residual standard error). used resScale NULL used. sparseLimit Limit number rows reduced x-matrix within algorithm. exceeded, sparse algorithm used (see IpsoExtra).","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/SuppressDec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suppressed tabular data: Inner cell frequencies as decimal numbers â€” SuppressDec","text":"inner cell frequencies decimal numbers","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/SuppressDec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Suppressed tabular data: Inner cell frequencies as decimal numbers â€” SuppressDec","text":"function makes use ReduceX RegSDCipso. required y consists cell frequencies. multivariate y z also possible. several values possible digits, resScale rmse input.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/SuppressDec.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Suppressed tabular data: Inner cell frequencies as decimal numbers â€” SuppressDec","text":"Capital letters, X, Y Z, used paper.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/SuppressDec.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Suppressed tabular data: Inner cell frequencies as decimal numbers â€” SuppressDec","text":"Ã˜yvind Langsrud","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/SuppressDec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Suppressed tabular data: Inner cell frequencies as decimal numbers â€” SuppressDec","text":"","code":"# Same data as in the paper z <- RegSDCdata(\"sec7z\") x <- RegSDCdata(\"sec7x\") y <- RegSDCdata(\"sec7y\")  # Now z is t(x) %*% y  zAll <- RegSDCdata(\"sec7zAll\") zAllSupp <- RegSDCdata(\"sec7zAllSupp\") xAll <- RegSDCdata(\"sec7xAll\")  # When no suppression, output is identical to y SuppressDec(xAll, zAll, y) #>           freq #> row1_col1    3 #> row2_col1    1 #> row3_col1   12 #> row4_col1   18 #> row1_col2   11 #> row2_col2    9 #> row3_col2   22 #> row4_col2   19 #> row1_col3   32 #> row2_col3   13 #> row3_col3    2 #> row4_col3   16 #> row1_col4   30 #> row2_col4    8 #> row3_col4    2 #> row4_col4    3 SuppressDec(xAll, zAll)  # y can be seen in z #>           freq #> row1_col1    3 #> row2_col1    1 #> row3_col1   12 #> row4_col1   18 #> row1_col2   11 #> row2_col2    9 #> row3_col2   22 #> row4_col2   19 #> row1_col3   32 #> row2_col3   13 #> row3_col3    2 #> row4_col3   16 #> row1_col4   30 #> row2_col4    8 #> row3_col4    2 #> row4_col4    3  # Similar to Y* in paper (but other random values) SuppressDec(x, z, y) #>                 freq #> row1_col1  8.3760459 #> row2_col1 -2.1183476 #> row3_col1 12.0000000 #> row4_col1 15.7423017 #> row1_col2  5.6239541 #> row2_col2 14.3760459 #> row3_col2 22.0000000 #> row4_col2 19.0000000 #> row1_col3 32.0000000 #> row2_col3 10.7423017 #> row3_col3  4.2576983 #> row4_col3 16.0000000 #> row1_col4 30.0000000 #> row2_col4  8.0000000 #> row3_col4 -0.2576983 #> row4_col4  5.2576983  # Residual standard error forced to be 1 SuppressDec(x, z, y, rmse = 1) #>                freq #> row1_col1  3.627008 #> row2_col1  4.600348 #> row3_col1 12.000000 #> row4_col1 13.772644 #> row1_col2 10.372992 #> row2_col2  9.627008 #> row3_col2 22.000000 #> row4_col2 19.000000 #> row1_col3 32.000000 #> row2_col3  8.772644 #> row3_col3  6.227356 #> row4_col3 16.000000 #> row1_col4 30.000000 #> row2_col4  8.000000 #> row3_col4 -2.227356 #> row4_col4  7.227356  # Seven ways of obtaining the same output SuppressDec(x, z, rmse = 1)  # slower, y must be estimated #>                freq #> row1_col1  4.070156 #> row2_col1  5.179566 #> row3_col1 12.000000 #> row4_col1 12.750278 #> row1_col2  9.929844 #> row2_col2 10.070156 #> row3_col2 22.000000 #> row4_col2 19.000000 #> row1_col3 32.000000 #> row2_col3  7.750278 #> row3_col3  7.249722 #> row4_col3 16.000000 #> row1_col4 30.000000 #> row2_col4  8.000000 #> row3_col4 -3.249722 #> row4_col4  8.249722 SuppressDec(x, y = y, rmse = 1) #>                freq #> row1_col1  4.895203 #> row2_col1  3.951412 #> row3_col1 12.000000 #> row4_col1 13.153385 #> row1_col2  9.104797 #> row2_col2 10.895203 #> row3_col2 22.000000 #> row4_col2 19.000000 #> row1_col3 32.000000 #> row2_col3  8.153385 #> row3_col3  6.846615 #> row4_col3 16.000000 #> row1_col4 30.000000 #> row2_col4  8.000000 #> row3_col4 -2.846615 #> row4_col4  7.846615 SuppressDec(xAll, zAllSupp, y, rmse = 1) #>                freq #> row1_col1  4.832868 #> row2_col1  4.209071 #> row3_col1 12.000000 #> row4_col1 12.958061 #> row1_col2  9.167132 #> row2_col2 10.832868 #> row3_col2 22.000000 #> row4_col2 19.000000 #> row1_col3 32.000000 #> row2_col3  7.958061 #> row3_col3  7.041939 #> row4_col3 16.000000 #> row1_col4 30.000000 #> row2_col4  8.000000 #> row3_col4 -3.041939 #> row4_col4  8.041939 SuppressDec(xAll, zAllSupp, rmse = 1)  # slower, y must be estimated #>                freq #> row1_col1  4.884392 #> row2_col1  4.033761 #> row3_col1 12.000000 #> row4_col1 13.081846 #> row1_col2  9.115608 #> row2_col2 10.884392 #> row3_col2 22.000000 #> row4_col2 19.000000 #> row1_col3 32.000000 #> row2_col3  8.081846 #> row3_col3  6.918154 #> row4_col3 16.000000 #> row1_col4 30.000000 #> row2_col4  8.000000 #> row3_col4 -2.918154 #> row4_col4  7.918154 SuppressDec(xAll, zAll, y, is.na(zAllSupp), rmse = 1) #>                freq #> row1_col1  4.781734 #> row2_col1  3.703295 #> row3_col1 12.000000 #> row4_col1 13.514971 #> row1_col2  9.218266 #> row2_col2 10.781734 #> row3_col2 22.000000 #> row4_col2 19.000000 #> row1_col3 32.000000 #> row2_col3  8.514971 #> row3_col3  6.485029 #> row4_col3 16.000000 #> row1_col4 30.000000 #> row2_col4  8.000000 #> row3_col4 -2.485029 #> row4_col4  7.485029 SuppressDec(xAll, zAll, suppressed = is.na(zAllSupp), rmse = 1)  # y seen in z #>                freq #> row1_col1  4.616492 #> row2_col1  3.696645 #> row3_col1 12.000000 #> row4_col1 13.686863 #> row1_col2  9.383508 #> row2_col2 10.616492 #> row3_col2 22.000000 #> row4_col2 19.000000 #> row1_col3 32.000000 #> row2_col3  8.686863 #> row3_col3  6.313137 #> row4_col3 16.000000 #> row1_col4 30.000000 #> row2_col4  8.000000 #> row3_col4 -2.313137 #> row4_col4  7.313137 SuppressDec(xAll, y = y, suppressed = is.na(zAllSupp), rmse = 1) #>                freq #> row1_col1  4.729882 #> row2_col1  4.427013 #> row3_col1 12.000000 #> row4_col1 12.843105 #> row1_col2  9.270118 #> row2_col2 10.729882 #> row3_col2 22.000000 #> row4_col2 19.000000 #> row1_col3 32.000000 #> row2_col3  7.843105 #> row3_col3  7.156895 #> row4_col3 16.000000 #> row1_col4 30.000000 #> row2_col4  8.000000 #> row3_col4 -3.156895 #> row4_col4  8.156895  # YhatMod4 and YhatMod10 in Table 2 in paper SuppressDec(xAll, zAllSupp, y, yDeduct = 4 * (y%/%4), resScale = 0) #>                 freq #> row1_col1  2.9565217 #> row2_col1  0.8695652 #> row3_col1 12.0000000 #> row4_col1 18.1739130 #> row1_col2 11.0434783 #> row2_col2  8.9565217 #> row3_col2 22.0000000 #> row4_col2 19.0000000 #> row1_col3 32.0000000 #> row2_col3 13.1739130 #> row3_col3  1.8260870 #> row4_col3 16.0000000 #> row1_col4 30.0000000 #> row2_col4  8.0000000 #> row3_col4  2.1739130 #> row4_col4  2.8260870 SuppressDec(xAll, zAllSupp, y, yDeduct = 10 * (y%/%10), rmse = 0) #>                 freq #> row1_col1  0.6956522 #> row2_col1  4.0869565 #> row3_col1 12.0000000 #> row4_col1 17.2173913 #> row1_col2 13.3043478 #> row2_col2  6.6956522 #> row3_col2 22.0000000 #> row4_col2 19.0000000 #> row1_col3 32.0000000 #> row2_col3 12.2173913 #> row3_col3  2.7826087 #> row4_col3 16.0000000 #> row1_col4 30.0000000 #> row2_col4  8.0000000 #> row3_col4  1.2173913 #> row4_col4  3.7826087  # As data in Table 3 in paper (but other random values) SuppressDec(xAll, zAllSupp, y, yDeduct = 10 * (y%/%10), resScale = 0.1) #>                 freq #> row1_col1  0.6512744 #> row2_col1  4.3390612 #> row3_col1 12.0000000 #> row4_col1 17.0096643 #> row1_col2 13.3487256 #> row2_col2  6.6512744 #> row3_col2 22.0000000 #> row4_col2 19.0000000 #> row1_col3 32.0000000 #> row2_col3 12.0096643 #> row3_col3  2.9903357 #> row4_col3 16.0000000 #> row1_col4 30.0000000 #> row2_col4  8.0000000 #> row3_col4  1.0096643 #> row4_col4  3.9903357  # rmse instead of resScale and 5 draws SuppressDec(xAll, zAllSupp, y, yDeduct = 10 * (y%/%10), rmse = 1, nRep = 5) #>                 freq      freq      freq      freq       freq #> row1_col1  0.4336625  1.005745  1.324514  1.416361  0.7262801 #> row2_col1  3.7672470  3.307106  3.278874  3.447879  4.6382642 #> row3_col1 12.0000000 12.000000 12.000000 12.000000 12.0000000 #> row4_col1 17.7990905 17.687149 17.396612 17.135760 16.6354556 #> row1_col2 13.5663375 12.994255 12.675486 12.583639 13.2737199 #> row2_col2  6.4336625  7.005745  7.324514  7.416361  6.7262801 #> row3_col2 22.0000000 22.000000 22.000000 22.000000 22.0000000 #> row4_col2 19.0000000 19.000000 19.000000 19.000000 19.0000000 #> row1_col3 32.0000000 32.000000 32.000000 32.000000 32.0000000 #> row2_col3 12.7990905 12.687149 12.396612 12.135760 11.6354556 #> row3_col3  2.2009095  2.312851  2.603388  2.864240  3.3645444 #> row4_col3 16.0000000 16.000000 16.000000 16.000000 16.0000000 #> row1_col4 30.0000000 30.000000 30.000000 30.000000 30.0000000 #> row2_col4  8.0000000  8.000000  8.000000  8.000000  8.0000000 #> row3_col4  1.7990905  1.687149  1.396612  1.135760  0.6354556 #> row4_col4  3.2009095  3.312851  3.603388  3.864240  4.3645444"},{"path":"https://olangsrud.github.io/RegSDC/reference/Z2Yhat.html","id":null,"dir":"Reference","previous_headings":"","what":"Suppressed tabular data: Yhat from X and Z â€” Z2Yhat","title":"Suppressed tabular data: Yhat from X and Z â€” Z2Yhat","text":"Implementation equation 21 paper.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/Z2Yhat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suppressed tabular data: Yhat from X and Z â€” Z2Yhat","text":"","code":"Z2Yhat(z, x, digits = 9)"},{"path":"https://olangsrud.github.io/RegSDC/reference/Z2Yhat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suppressed tabular data: Yhat from X and Z â€” Z2Yhat","text":"z Z matrix x X matrix digits non-NULL, output values close whole numbers rounded using digits input RoundWhole.","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/Z2Yhat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suppressed tabular data: Yhat from X and Z â€” Z2Yhat","text":"Yhat matrix","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/Z2Yhat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Suppressed tabular data: Yhat from X and Z â€” Z2Yhat","text":"Generalized inverse computed ginv. practise, computations can speeded using reduced versions X Z. See ReduceX.","code":""},{"path":[]},{"path":"https://olangsrud.github.io/RegSDC/reference/Z2Yhat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Suppressed tabular data: Yhat from X and Z â€” Z2Yhat","text":"Ã˜yvind Langsrud","code":""},{"path":"https://olangsrud.github.io/RegSDC/reference/Z2Yhat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Suppressed tabular data: Yhat from X and Z â€” Z2Yhat","text":"","code":"# Same data as in the paper z <- RegSDCdata(\"sec7z\") x <- RegSDCdata(\"sec7x\") Z2Yhat(z, x) #>                freq #> row1_col1  4.173913 #> row2_col1  4.521739 #> row3_col1 12.000000 #> row4_col1 13.304348 #> row1_col2  9.826087 #> row2_col2 10.173913 #> row3_col2 22.000000 #> row4_col2 19.000000 #> row1_col3 32.000000 #> row2_col3  8.304348 #> row3_col3  6.695652 #> row4_col3 16.000000 #> row1_col4 30.000000 #> row2_col4  8.000000 #> row3_col4 -2.695652 #> row4_col4  7.695652  # With y known, yHat can be computed in other ways y <- RegSDCdata(\"sec7y\")  # Now z is t(x) %*% y  fitted(lm(y ~ x - 1)) #> row1_col1 row2_col1 row3_col1 row4_col1 row1_col2 row2_col2 row3_col2 row4_col2  #>  4.173913  4.521739 12.000000 13.304348  9.826087 10.173913 22.000000 19.000000  #> row1_col3 row2_col3 row3_col3 row4_col3 row1_col4 row2_col4 row3_col4 row4_col4  #> 32.000000  8.304348  6.695652 16.000000 30.000000  8.000000 -2.695652  7.695652  IpsoExtra(y, x, FALSE, resScale = 0) #>                freq #> row1_col1  4.173913 #> row2_col1  4.521739 #> row3_col1 12.000000 #> row4_col1 13.304348 #> row1_col2  9.826087 #> row2_col2 10.173913 #> row3_col2 22.000000 #> row4_col2 19.000000 #> row1_col3 32.000000 #> row2_col3  8.304348 #> row3_col3  6.695652 #> row4_col3 16.000000 #> row1_col4 30.000000 #> row2_col4  8.000000 #> row3_col4 -2.695652 #> row4_col4  7.695652"}]
